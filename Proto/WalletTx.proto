syntax = "proto3";
import "TxIn.proto"; 
import "TxOut.proto";
package Enze;
message MerkleTx
{
    int32 nCurVersion = 1; // 交易的版本号，用于升级
    int32 nLockTime = 2; // 交易对应的锁定时间
    repeated TxIn vTxIn = 3; // 交易对应的输入
    repeated TxOut vTxOut = 4; //交易对应的锁定时间
    bytes hashBlock = 5;// 交易所在block对应的hash值，因为block中有对应整个交易的默克尔树，这样才能根据分支来校验当前交易是否在block中 
    repeated bytes vMerkleBranch = 6; // 当前交易对应的默克尔分支
    int32 nIndex = 7;// 当前交易在对应的block对应的输入m_vTrans列表中的索引，CMerkleTx就是根据索引来计算这个交易对应的默克尔树分支 
}

message OrderForm 
{
    map<string, string> mapOrder = 1;
}

message WalletTx
{
    int32 nCurVersion = 1; // 交易的版本号，用于升级
    int32 nLockTime = 2; // 交易对应的锁定时间
    repeated TxIn vTxIn = 3; // 交易对应的输入
    repeated TxOut vTxOut = 4; //交易对应的锁定时间
    bytes hashBlock = 5;// 交易所在block对应的hash值，因为block中有对应整个交易的默克尔树，这样才能根据分支来校验当前交易是否在block中 
    repeated bytes vMerkleBranch = 6; // 当前交易对应的默克尔分支
    int32 nIndex = 7;// 当前交易在对应的block对应的输入m_vTrans列表中的索引，CMerkleTx就是根据索引来计算这个交易对应的默克尔树分支的
    
    repeated MerkleTx vPrevTx = 8; // 当前交易A对应的输入对应的交易B，如果B所在block到最长链末尾的长度小于3，则将次交易放入
    /*
	主要用于存放一下自定义的值
	wtx.mapValue["to"] = strAddress;
	wtx.mapValue["from"] = m_textCtrlFrom->GetValue();
	wtx.mapValue["message"] = m_textCtrlMessage->GetValue();
	*/
	map<string, string> mapValue = 9;
	// 表单控件信息
    repeated OrderForm OrderList = 10;
    //unsigned int m_bTimeReceivedIsTxTime;// 接收时间是否是交易时间标记
    bool bTimeReceivedIsTxTime = 11;// 接收时间是否是交易时间标记
    uint32  uTimeReceived = 12;  // time received by this node 交易被这个节点接收的时间
    /*  
    char m_bFromMe;
    char m_bSpent; // 是否花费交易标记
    */
    bool bFromMe = 13;
    bool bSpent = 14; // 是否花费交易标记
    //// probably need to sign the order info so know it came from payer
}


