// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Block.proto

#include "Block.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Transaction_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Transaction_Transaction_2eproto;
namespace Enze {
class BlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
}  // namespace Enze
static void InitDefaultsBlock_Block_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Enze::_Block_default_instance_;
    new (ptr) ::Enze::Block();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Enze::Block::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Block_Block_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlock_Block_2eproto}, {
      &scc_info_Transaction_Transaction_2eproto.base,}};

void InitDefaults_Block_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Block_Block_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Block_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_Block_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Block_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Block_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Enze::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Enze::Block, ncurversion_),
  PROTOBUF_FIELD_OFFSET(::Enze::Block, hashprevblock_),
  PROTOBUF_FIELD_OFFSET(::Enze::Block, hashmerkleroot_),
  PROTOBUF_FIELD_OFFSET(::Enze::Block, utime_),
  PROTOBUF_FIELD_OFFSET(::Enze::Block, ubits_),
  PROTOBUF_FIELD_OFFSET(::Enze::Block, unonce_),
  PROTOBUF_FIELD_OFFSET(::Enze::Block, vtrans_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Enze::Block)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Enze::_Block_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Block_2eproto = {
  {}, AddDescriptors_Block_2eproto, "Block.proto", schemas,
  file_default_instances, TableStruct_Block_2eproto::offsets,
  file_level_metadata_Block_2eproto, 1, file_level_enum_descriptors_Block_2eproto, file_level_service_descriptors_Block_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_Block_2eproto = {
  false, InitDefaults_Block_2eproto, 
  "\n\013Block.proto\022\004Enze\032\021Transaction.proto\"\234"
  "\001\n\005Block\022\023\n\013nCurVersion\030\001 \001(\005\022\025\n\rhashPre"
  "vBlock\030\002 \001(\t\022\026\n\016hashMerkleRoot\030\003 \001(\t\022\r\n\005"
  "uTime\030\004 \001(\r\022\r\n\005uBits\030\005 \001(\r\022\016\n\006uNonce\030\006 \001"
  "(\r\022!\n\006vTrans\030\007 \003(\0132\021.Enze.Transactionb\006p"
  "roto3"
,
  "Block.proto", &assign_descriptors_table_Block_2eproto, 205,
};

void AddDescriptors_Block_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_Transaction_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Block_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Block_2eproto = []() { AddDescriptors_Block_2eproto(); return true; }();
namespace Enze {

// ===================================================================

void Block::InitAsDefaultInstance() {
}
class Block::HasBitSetters {
 public:
};

void Block::clear_vtrans() {
  vtrans_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kNCurVersionFieldNumber;
const int Block::kHashPrevBlockFieldNumber;
const int Block::kHashMerkleRootFieldNumber;
const int Block::kUTimeFieldNumber;
const int Block::kUBitsFieldNumber;
const int Block::kUNonceFieldNumber;
const int Block::kVTransFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Enze.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vtrans_(from.vtrans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashprevblock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hashprevblock().size() > 0) {
    hashprevblock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashprevblock_);
  }
  hashmerkleroot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hashmerkleroot().size() > 0) {
    hashmerkleroot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashmerkleroot_);
  }
  ::memcpy(&ncurversion_, &from.ncurversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&unonce_) -
    reinterpret_cast<char*>(&ncurversion_)) + sizeof(unonce_));
  // @@protoc_insertion_point(copy_constructor:Enze.Block)
}

void Block::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Block_Block_2eproto.base);
  hashprevblock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashmerkleroot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ncurversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unonce_) -
      reinterpret_cast<char*>(&ncurversion_)) + sizeof(unonce_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:Enze.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  hashprevblock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashmerkleroot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Block_Block_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:Enze.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vtrans_.Clear();
  hashprevblock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashmerkleroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ncurversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unonce_) -
      reinterpret_cast<char*>(&ncurversion_)) + sizeof(unonce_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Block::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Block*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 nCurVersion = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_ncurversion(value);
        break;
      }
      // string hashPrevBlock = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Enze.Block.hashPrevBlock");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_hashprevblock();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // string hashMerkleRoot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Enze.Block.hashMerkleRoot");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_hashmerkleroot();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // uint32 uTime = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_utime(value);
        break;
      }
      // uint32 uBits = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_ubits(value);
        break;
      }
      // uint32 uNonce = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_unonce(value);
        break;
      }
      // repeated .Enze.Transaction vTrans = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Enze::Transaction::_InternalParse;
          object = msg->add_vtrans();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Enze.Block)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nCurVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncurversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hashPrevBlock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashprevblock()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashprevblock().data(), static_cast<int>(this->hashprevblock().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.Block.hashPrevBlock"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hashMerkleRoot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashmerkleroot()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashmerkleroot().data(), static_cast<int>(this->hashmerkleroot().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.Block.hashMerkleRoot"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uBits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ubits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uNonce = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Enze.Transaction vTrans = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vtrans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Enze.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Enze.Block)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Enze.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nCurVersion = 1;
  if (this->ncurversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ncurversion(), output);
  }

  // string hashPrevBlock = 2;
  if (this->hashprevblock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashprevblock().data(), static_cast<int>(this->hashprevblock().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.Block.hashPrevBlock");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hashprevblock(), output);
  }

  // string hashMerkleRoot = 3;
  if (this->hashmerkleroot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashmerkleroot().data(), static_cast<int>(this->hashmerkleroot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.Block.hashMerkleRoot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hashmerkleroot(), output);
  }

  // uint32 uTime = 4;
  if (this->utime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->utime(), output);
  }

  // uint32 uBits = 5;
  if (this->ubits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ubits(), output);
  }

  // uint32 uNonce = 6;
  if (this->unonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unonce(), output);
  }

  // repeated .Enze.Transaction vTrans = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vtrans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->vtrans(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Enze.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Enze.Block)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nCurVersion = 1;
  if (this->ncurversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ncurversion(), target);
  }

  // string hashPrevBlock = 2;
  if (this->hashprevblock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashprevblock().data(), static_cast<int>(this->hashprevblock().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.Block.hashPrevBlock");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hashprevblock(), target);
  }

  // string hashMerkleRoot = 3;
  if (this->hashmerkleroot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashmerkleroot().data(), static_cast<int>(this->hashmerkleroot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.Block.hashMerkleRoot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hashmerkleroot(), target);
  }

  // uint32 uTime = 4;
  if (this->utime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->utime(), target);
  }

  // uint32 uBits = 5;
  if (this->ubits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ubits(), target);
  }

  // uint32 uNonce = 6;
  if (this->unonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->unonce(), target);
  }

  // repeated .Enze.Transaction vTrans = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vtrans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->vtrans(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Enze.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Enze.Block)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Enze.Transaction vTrans = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->vtrans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vtrans(static_cast<int>(i)));
    }
  }

  // string hashPrevBlock = 2;
  if (this->hashprevblock().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashprevblock());
  }

  // string hashMerkleRoot = 3;
  if (this->hashmerkleroot().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashmerkleroot());
  }

  // int32 nCurVersion = 1;
  if (this->ncurversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncurversion());
  }

  // uint32 uTime = 4;
  if (this->utime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->utime());
  }

  // uint32 uBits = 5;
  if (this->ubits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ubits());
  }

  // uint32 uNonce = 6;
  if (this->unonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unonce());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Enze.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::DynamicCastToGenerated<Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Enze.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Enze.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Enze.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vtrans_.MergeFrom(from.vtrans_);
  if (from.hashprevblock().size() > 0) {

    hashprevblock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashprevblock_);
  }
  if (from.hashmerkleroot().size() > 0) {

    hashmerkleroot_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashmerkleroot_);
  }
  if (from.ncurversion() != 0) {
    set_ncurversion(from.ncurversion());
  }
  if (from.utime() != 0) {
    set_utime(from.utime());
  }
  if (from.ubits() != 0) {
    set_ubits(from.ubits());
  }
  if (from.unonce() != 0) {
    set_unonce(from.unonce());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Enze.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Enze.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&vtrans_)->InternalSwap(CastToBase(&other->vtrans_));
  hashprevblock_.Swap(&other->hashprevblock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashmerkleroot_.Swap(&other->hashmerkleroot_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ncurversion_, other->ncurversion_);
  swap(utime_, other->utime_);
  swap(ubits_, other->ubits_);
  swap(unonce_, other->unonce_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Block_2eproto);
  return ::file_level_metadata_Block_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Enze
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Enze::Block* Arena::CreateMaybeMessage< ::Enze::Block >(Arena* arena) {
  return Arena::CreateInternal< ::Enze::Block >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
