// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TxIndex.proto

#include "TxIndex.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_DiskTxPos_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DiskTxPos_DiskTxPos_2eproto;
namespace Enze {
class TxIndexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TxIndex> _instance;
} _TxIndex_default_instance_;
}  // namespace Enze
static void InitDefaultsTxIndex_TxIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Enze::_TxIndex_default_instance_;
    new (ptr) ::Enze::TxIndex();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Enze::TxIndex::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TxIndex_TxIndex_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTxIndex_TxIndex_2eproto}, {
      &scc_info_DiskTxPos_DiskTxPos_2eproto.base,}};

void InitDefaults_TxIndex_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TxIndex_TxIndex_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_TxIndex_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_TxIndex_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_TxIndex_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_TxIndex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Enze::TxIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Enze::TxIndex, cdiskpos_),
  PROTOBUF_FIELD_OFFSET(::Enze::TxIndex, vspent_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Enze::TxIndex)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Enze::_TxIndex_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_TxIndex_2eproto = {
  {}, AddDescriptors_TxIndex_2eproto, "TxIndex.proto", schemas,
  file_default_instances, TableStruct_TxIndex_2eproto::offsets,
  file_level_metadata_TxIndex_2eproto, 1, file_level_enum_descriptors_TxIndex_2eproto, file_level_service_descriptors_TxIndex_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_TxIndex_2eproto = {
  false, InitDefaults_TxIndex_2eproto, 
  "\n\rTxIndex.proto\022\004Enze\032\017DiskTxPos.proto\"M"
  "\n\007TxIndex\022!\n\010cDiskPos\030\001 \001(\0132\017.Enze.DiskT"
  "xPos\022\037\n\006vSpent\030\002 \003(\0132\017.Enze.DiskTxPosb\006p"
  "roto3"
,
  "TxIndex.proto", &assign_descriptors_table_TxIndex_2eproto, 125,
};

void AddDescriptors_TxIndex_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_DiskTxPos_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_TxIndex_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TxIndex_2eproto = []() { AddDescriptors_TxIndex_2eproto(); return true; }();
namespace Enze {

// ===================================================================

void TxIndex::InitAsDefaultInstance() {
  ::Enze::_TxIndex_default_instance_._instance.get_mutable()->cdiskpos_ = const_cast< ::Enze::DiskTxPos*>(
      ::Enze::DiskTxPos::internal_default_instance());
}
class TxIndex::HasBitSetters {
 public:
  static const ::Enze::DiskTxPos& cdiskpos(const TxIndex* msg);
};

const ::Enze::DiskTxPos&
TxIndex::HasBitSetters::cdiskpos(const TxIndex* msg) {
  return *msg->cdiskpos_;
}
void TxIndex::clear_cdiskpos() {
  if (GetArenaNoVirtual() == NULL && cdiskpos_ != NULL) {
    delete cdiskpos_;
  }
  cdiskpos_ = NULL;
}
void TxIndex::clear_vspent() {
  vspent_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxIndex::kCDiskPosFieldNumber;
const int TxIndex::kVSpentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxIndex::TxIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Enze.TxIndex)
}
TxIndex::TxIndex(const TxIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vspent_(from.vspent_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cdiskpos()) {
    cdiskpos_ = new ::Enze::DiskTxPos(*from.cdiskpos_);
  } else {
    cdiskpos_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Enze.TxIndex)
}

void TxIndex::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TxIndex_TxIndex_2eproto.base);
  cdiskpos_ = NULL;
}

TxIndex::~TxIndex() {
  // @@protoc_insertion_point(destructor:Enze.TxIndex)
  SharedDtor();
}

void TxIndex::SharedDtor() {
  if (this != internal_default_instance()) delete cdiskpos_;
}

void TxIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TxIndex& TxIndex::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TxIndex_TxIndex_2eproto.base);
  return *internal_default_instance();
}


void TxIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:Enze.TxIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vspent_.Clear();
  if (GetArenaNoVirtual() == NULL && cdiskpos_ != NULL) {
    delete cdiskpos_;
  }
  cdiskpos_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TxIndex::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TxIndex*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .Enze.DiskTxPos cDiskPos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Enze::DiskTxPos::_InternalParse;
        object = msg->mutable_cdiskpos();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated .Enze.DiskTxPos vSpent = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Enze::DiskTxPos::_InternalParse;
          object = msg->add_vspent();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TxIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Enze.TxIndex)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Enze.DiskTxPos cDiskPos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cdiskpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Enze.DiskTxPos vSpent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vspent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Enze.TxIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Enze.TxIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TxIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Enze.TxIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Enze.DiskTxPos cDiskPos = 1;
  if (this->has_cdiskpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cdiskpos(this), output);
  }

  // repeated .Enze.DiskTxPos vSpent = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vspent_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->vspent(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Enze.TxIndex)
}

::google::protobuf::uint8* TxIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Enze.TxIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Enze.DiskTxPos cDiskPos = 1;
  if (this->has_cdiskpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cdiskpos(this), deterministic, target);
  }

  // repeated .Enze.DiskTxPos vSpent = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vspent_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->vspent(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Enze.TxIndex)
  return target;
}

size_t TxIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Enze.TxIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Enze.DiskTxPos vSpent = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vspent_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vspent(static_cast<int>(i)));
    }
  }

  // .Enze.DiskTxPos cDiskPos = 1;
  if (this->has_cdiskpos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cdiskpos_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TxIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Enze.TxIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const TxIndex* source =
      ::google::protobuf::DynamicCastToGenerated<TxIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Enze.TxIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Enze.TxIndex)
    MergeFrom(*source);
  }
}

void TxIndex::MergeFrom(const TxIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Enze.TxIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vspent_.MergeFrom(from.vspent_);
  if (from.has_cdiskpos()) {
    mutable_cdiskpos()->::Enze::DiskTxPos::MergeFrom(from.cdiskpos());
  }
}

void TxIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Enze.TxIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxIndex::CopyFrom(const TxIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Enze.TxIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxIndex::IsInitialized() const {
  return true;
}

void TxIndex::Swap(TxIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxIndex::InternalSwap(TxIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&vspent_)->InternalSwap(CastToBase(&other->vspent_));
  swap(cdiskpos_, other->cdiskpos_);
}

::google::protobuf::Metadata TxIndex::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_TxIndex_2eproto);
  return ::file_level_metadata_TxIndex_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Enze
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Enze::TxIndex* Arena::CreateMaybeMessage< ::Enze::TxIndex >(Arena* arena) {
  return Arena::CreateInternal< ::Enze::TxIndex >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
