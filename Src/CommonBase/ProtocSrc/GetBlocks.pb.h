// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetBlocks.proto

#ifndef PROTOBUF_INCLUDED_GetBlocks_2eproto
#define PROTOBUF_INCLUDED_GetBlocks_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GetBlocks_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_GetBlocks_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_GetBlocks_2eproto();
namespace Enze {
class GetBlocks;
class GetBlocksDefaultTypeInternal;
extern GetBlocksDefaultTypeInternal _GetBlocks_default_instance_;
class GetBlocks_BlockLocator;
class GetBlocks_BlockLocatorDefaultTypeInternal;
extern GetBlocks_BlockLocatorDefaultTypeInternal _GetBlocks_BlockLocator_default_instance_;
}  // namespace Enze
namespace google {
namespace protobuf {
template<> ::Enze::GetBlocks* Arena::CreateMaybeMessage<::Enze::GetBlocks>(Arena*);
template<> ::Enze::GetBlocks_BlockLocator* Arena::CreateMaybeMessage<::Enze::GetBlocks_BlockLocator>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Enze {

// ===================================================================

class GetBlocks_BlockLocator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.GetBlocks.BlockLocator) */ {
 public:
  GetBlocks_BlockLocator();
  virtual ~GetBlocks_BlockLocator();

  GetBlocks_BlockLocator(const GetBlocks_BlockLocator& from);

  inline GetBlocks_BlockLocator& operator=(const GetBlocks_BlockLocator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBlocks_BlockLocator(GetBlocks_BlockLocator&& from) noexcept
    : GetBlocks_BlockLocator() {
    *this = ::std::move(from);
  }

  inline GetBlocks_BlockLocator& operator=(GetBlocks_BlockLocator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetBlocks_BlockLocator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlocks_BlockLocator* internal_default_instance() {
    return reinterpret_cast<const GetBlocks_BlockLocator*>(
               &_GetBlocks_BlockLocator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetBlocks_BlockLocator* other);
  friend void swap(GetBlocks_BlockLocator& a, GetBlocks_BlockLocator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBlocks_BlockLocator* New() const final {
    return CreateMaybeMessage<GetBlocks_BlockLocator>(NULL);
  }

  GetBlocks_BlockLocator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBlocks_BlockLocator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBlocks_BlockLocator& from);
  void MergeFrom(const GetBlocks_BlockLocator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlocks_BlockLocator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string vHave = 1;
  int vhave_size() const;
  void clear_vhave();
  static const int kVHaveFieldNumber = 1;
  const ::std::string& vhave(int index) const;
  ::std::string* mutable_vhave(int index);
  void set_vhave(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vhave(int index, ::std::string&& value);
  #endif
  void set_vhave(int index, const char* value);
  void set_vhave(int index, const char* value, size_t size);
  ::std::string* add_vhave();
  void add_vhave(const ::std::string& value);
  #if LANG_CXX11
  void add_vhave(::std::string&& value);
  #endif
  void add_vhave(const char* value);
  void add_vhave(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& vhave() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_vhave();

  // @@protoc_insertion_point(class_scope:Enze.GetBlocks.BlockLocator)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> vhave_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GetBlocks_2eproto;
};
// -------------------------------------------------------------------

class GetBlocks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.GetBlocks) */ {
 public:
  GetBlocks();
  virtual ~GetBlocks();

  GetBlocks(const GetBlocks& from);

  inline GetBlocks& operator=(const GetBlocks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBlocks(GetBlocks&& from) noexcept
    : GetBlocks() {
    *this = ::std::move(from);
  }

  inline GetBlocks& operator=(GetBlocks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetBlocks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlocks* internal_default_instance() {
    return reinterpret_cast<const GetBlocks*>(
               &_GetBlocks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetBlocks* other);
  friend void swap(GetBlocks& a, GetBlocks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBlocks* New() const final {
    return CreateMaybeMessage<GetBlocks>(NULL);
  }

  GetBlocks* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBlocks>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBlocks& from);
  void MergeFrom(const GetBlocks& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlocks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetBlocks_BlockLocator BlockLocator;

  // accessors -------------------------------------------------------

  // string hashStop = 2;
  void clear_hashstop();
  static const int kHashStopFieldNumber = 2;
  const ::std::string& hashstop() const;
  void set_hashstop(const ::std::string& value);
  #if LANG_CXX11
  void set_hashstop(::std::string&& value);
  #endif
  void set_hashstop(const char* value);
  void set_hashstop(const char* value, size_t size);
  ::std::string* mutable_hashstop();
  ::std::string* release_hashstop();
  void set_allocated_hashstop(::std::string* hashstop);

  // .Enze.GetBlocks.BlockLocator locator = 1;
  bool has_locator() const;
  void clear_locator();
  static const int kLocatorFieldNumber = 1;
  const ::Enze::GetBlocks_BlockLocator& locator() const;
  ::Enze::GetBlocks_BlockLocator* release_locator();
  ::Enze::GetBlocks_BlockLocator* mutable_locator();
  void set_allocated_locator(::Enze::GetBlocks_BlockLocator* locator);

  // @@protoc_insertion_point(class_scope:Enze.GetBlocks)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hashstop_;
  ::Enze::GetBlocks_BlockLocator* locator_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GetBlocks_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetBlocks_BlockLocator

// repeated string vHave = 1;
inline int GetBlocks_BlockLocator::vhave_size() const {
  return vhave_.size();
}
inline void GetBlocks_BlockLocator::clear_vhave() {
  vhave_.Clear();
}
inline const ::std::string& GetBlocks_BlockLocator::vhave(int index) const {
  // @@protoc_insertion_point(field_get:Enze.GetBlocks.BlockLocator.vHave)
  return vhave_.Get(index);
}
inline ::std::string* GetBlocks_BlockLocator::mutable_vhave(int index) {
  // @@protoc_insertion_point(field_mutable:Enze.GetBlocks.BlockLocator.vHave)
  return vhave_.Mutable(index);
}
inline void GetBlocks_BlockLocator::set_vhave(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Enze.GetBlocks.BlockLocator.vHave)
  vhave_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetBlocks_BlockLocator::set_vhave(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Enze.GetBlocks.BlockLocator.vHave)
  vhave_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetBlocks_BlockLocator::set_vhave(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vhave_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Enze.GetBlocks.BlockLocator.vHave)
}
inline void GetBlocks_BlockLocator::set_vhave(int index, const char* value, size_t size) {
  vhave_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Enze.GetBlocks.BlockLocator.vHave)
}
inline ::std::string* GetBlocks_BlockLocator::add_vhave() {
  // @@protoc_insertion_point(field_add_mutable:Enze.GetBlocks.BlockLocator.vHave)
  return vhave_.Add();
}
inline void GetBlocks_BlockLocator::add_vhave(const ::std::string& value) {
  vhave_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Enze.GetBlocks.BlockLocator.vHave)
}
#if LANG_CXX11
inline void GetBlocks_BlockLocator::add_vhave(::std::string&& value) {
  vhave_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Enze.GetBlocks.BlockLocator.vHave)
}
#endif
inline void GetBlocks_BlockLocator::add_vhave(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vhave_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Enze.GetBlocks.BlockLocator.vHave)
}
inline void GetBlocks_BlockLocator::add_vhave(const char* value, size_t size) {
  vhave_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Enze.GetBlocks.BlockLocator.vHave)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GetBlocks_BlockLocator::vhave() const {
  // @@protoc_insertion_point(field_list:Enze.GetBlocks.BlockLocator.vHave)
  return vhave_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GetBlocks_BlockLocator::mutable_vhave() {
  // @@protoc_insertion_point(field_mutable_list:Enze.GetBlocks.BlockLocator.vHave)
  return &vhave_;
}

// -------------------------------------------------------------------

// GetBlocks

// .Enze.GetBlocks.BlockLocator locator = 1;
inline bool GetBlocks::has_locator() const {
  return this != internal_default_instance() && locator_ != NULL;
}
inline void GetBlocks::clear_locator() {
  if (GetArenaNoVirtual() == NULL && locator_ != NULL) {
    delete locator_;
  }
  locator_ = NULL;
}
inline const ::Enze::GetBlocks_BlockLocator& GetBlocks::locator() const {
  const ::Enze::GetBlocks_BlockLocator* p = locator_;
  // @@protoc_insertion_point(field_get:Enze.GetBlocks.locator)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::GetBlocks_BlockLocator*>(
      &::Enze::_GetBlocks_BlockLocator_default_instance_);
}
inline ::Enze::GetBlocks_BlockLocator* GetBlocks::release_locator() {
  // @@protoc_insertion_point(field_release:Enze.GetBlocks.locator)
  
  ::Enze::GetBlocks_BlockLocator* temp = locator_;
  locator_ = NULL;
  return temp;
}
inline ::Enze::GetBlocks_BlockLocator* GetBlocks::mutable_locator() {
  
  if (locator_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::GetBlocks_BlockLocator>(GetArenaNoVirtual());
    locator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.GetBlocks.locator)
  return locator_;
}
inline void GetBlocks::set_allocated_locator(::Enze::GetBlocks_BlockLocator* locator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete locator_;
  }
  if (locator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      locator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, locator, submessage_arena);
    }
    
  } else {
    
  }
  locator_ = locator;
  // @@protoc_insertion_point(field_set_allocated:Enze.GetBlocks.locator)
}

// string hashStop = 2;
inline void GetBlocks::clear_hashstop() {
  hashstop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBlocks::hashstop() const {
  // @@protoc_insertion_point(field_get:Enze.GetBlocks.hashStop)
  return hashstop_.GetNoArena();
}
inline void GetBlocks::set_hashstop(const ::std::string& value) {
  
  hashstop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.GetBlocks.hashStop)
}
#if LANG_CXX11
inline void GetBlocks::set_hashstop(::std::string&& value) {
  
  hashstop_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.GetBlocks.hashStop)
}
#endif
inline void GetBlocks::set_hashstop(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashstop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.GetBlocks.hashStop)
}
inline void GetBlocks::set_hashstop(const char* value, size_t size) {
  
  hashstop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.GetBlocks.hashStop)
}
inline ::std::string* GetBlocks::mutable_hashstop() {
  
  // @@protoc_insertion_point(field_mutable:Enze.GetBlocks.hashStop)
  return hashstop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBlocks::release_hashstop() {
  // @@protoc_insertion_point(field_release:Enze.GetBlocks.hashStop)
  
  return hashstop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlocks::set_allocated_hashstop(::std::string* hashstop) {
  if (hashstop != NULL) {
    
  } else {
    
  }
  hashstop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashstop);
  // @@protoc_insertion_point(field_set_allocated:Enze.GetBlocks.hashStop)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Enze

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_GetBlocks_2eproto
