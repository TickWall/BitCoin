// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DiskBlockIndex.proto

#ifndef PROTOBUF_INCLUDED_DiskBlockIndex_2eproto
#define PROTOBUF_INCLUDED_DiskBlockIndex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DiskBlockIndex_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_DiskBlockIndex_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_DiskBlockIndex_2eproto();
namespace Enze {
class DiskBlockIndex;
class DiskBlockIndexDefaultTypeInternal;
extern DiskBlockIndexDefaultTypeInternal _DiskBlockIndex_default_instance_;
}  // namespace Enze
namespace google {
namespace protobuf {
template<> ::Enze::DiskBlockIndex* Arena::CreateMaybeMessage<::Enze::DiskBlockIndex>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Enze {

// ===================================================================

class DiskBlockIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.DiskBlockIndex) */ {
 public:
  DiskBlockIndex();
  virtual ~DiskBlockIndex();

  DiskBlockIndex(const DiskBlockIndex& from);

  inline DiskBlockIndex& operator=(const DiskBlockIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiskBlockIndex(DiskBlockIndex&& from) noexcept
    : DiskBlockIndex() {
    *this = ::std::move(from);
  }

  inline DiskBlockIndex& operator=(DiskBlockIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DiskBlockIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiskBlockIndex* internal_default_instance() {
    return reinterpret_cast<const DiskBlockIndex*>(
               &_DiskBlockIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DiskBlockIndex* other);
  friend void swap(DiskBlockIndex& a, DiskBlockIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiskBlockIndex* New() const final {
    return CreateMaybeMessage<DiskBlockIndex>(NULL);
  }

  DiskBlockIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiskBlockIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiskBlockIndex& from);
  void MergeFrom(const DiskBlockIndex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiskBlockIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes hashNext = 1;
  void clear_hashnext();
  static const int kHashNextFieldNumber = 1;
  const ::std::string& hashnext() const;
  void set_hashnext(const ::std::string& value);
  #if LANG_CXX11
  void set_hashnext(::std::string&& value);
  #endif
  void set_hashnext(const char* value);
  void set_hashnext(const void* value, size_t size);
  ::std::string* mutable_hashnext();
  ::std::string* release_hashnext();
  void set_allocated_hashnext(::std::string* hashnext);

  // bytes hashPrev = 2;
  void clear_hashprev();
  static const int kHashPrevFieldNumber = 2;
  const ::std::string& hashprev() const;
  void set_hashprev(const ::std::string& value);
  #if LANG_CXX11
  void set_hashprev(::std::string&& value);
  #endif
  void set_hashprev(const char* value);
  void set_hashprev(const void* value, size_t size);
  ::std::string* mutable_hashprev();
  ::std::string* release_hashprev();
  void set_allocated_hashprev(::std::string* hashprev);

  // bytes hashMerkleRoot = 10;
  void clear_hashmerkleroot();
  static const int kHashMerkleRootFieldNumber = 10;
  const ::std::string& hashmerkleroot() const;
  void set_hashmerkleroot(const ::std::string& value);
  #if LANG_CXX11
  void set_hashmerkleroot(::std::string&& value);
  #endif
  void set_hashmerkleroot(const char* value);
  void set_hashmerkleroot(const void* value, size_t size);
  ::std::string* mutable_hashmerkleroot();
  ::std::string* release_hashmerkleroot();
  void set_allocated_hashmerkleroot(::std::string* hashmerkleroot);

  // uint32 nFile = 3;
  void clear_nfile();
  static const int kNFileFieldNumber = 3;
  ::google::protobuf::uint32 nfile() const;
  void set_nfile(::google::protobuf::uint32 value);

  // uint32 nBlockpos = 4;
  void clear_nblockpos();
  static const int kNBlockposFieldNumber = 4;
  ::google::protobuf::uint32 nblockpos() const;
  void set_nblockpos(::google::protobuf::uint32 value);

  // uint32 nHeight = 5;
  void clear_nheight();
  static const int kNHeightFieldNumber = 5;
  ::google::protobuf::uint32 nheight() const;
  void set_nheight(::google::protobuf::uint32 value);

  // uint32 nVersion = 6;
  void clear_nversion();
  static const int kNVersionFieldNumber = 6;
  ::google::protobuf::uint32 nversion() const;
  void set_nversion(::google::protobuf::uint32 value);

  // uint32 nTime = 7;
  void clear_ntime();
  static const int kNTimeFieldNumber = 7;
  ::google::protobuf::uint32 ntime() const;
  void set_ntime(::google::protobuf::uint32 value);

  // uint32 nBit = 8;
  void clear_nbit();
  static const int kNBitFieldNumber = 8;
  ::google::protobuf::uint32 nbit() const;
  void set_nbit(::google::protobuf::uint32 value);

  // uint32 nNonce = 9;
  void clear_nnonce();
  static const int kNNonceFieldNumber = 9;
  ::google::protobuf::uint32 nnonce() const;
  void set_nnonce(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Enze.DiskBlockIndex)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hashnext_;
  ::google::protobuf::internal::ArenaStringPtr hashprev_;
  ::google::protobuf::internal::ArenaStringPtr hashmerkleroot_;
  ::google::protobuf::uint32 nfile_;
  ::google::protobuf::uint32 nblockpos_;
  ::google::protobuf::uint32 nheight_;
  ::google::protobuf::uint32 nversion_;
  ::google::protobuf::uint32 ntime_;
  ::google::protobuf::uint32 nbit_;
  ::google::protobuf::uint32 nnonce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DiskBlockIndex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DiskBlockIndex

// bytes hashNext = 1;
inline void DiskBlockIndex::clear_hashnext() {
  hashnext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiskBlockIndex::hashnext() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.hashNext)
  return hashnext_.GetNoArena();
}
inline void DiskBlockIndex::set_hashnext(const ::std::string& value) {
  
  hashnext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.hashNext)
}
#if LANG_CXX11
inline void DiskBlockIndex::set_hashnext(::std::string&& value) {
  
  hashnext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.DiskBlockIndex.hashNext)
}
#endif
inline void DiskBlockIndex::set_hashnext(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashnext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.DiskBlockIndex.hashNext)
}
inline void DiskBlockIndex::set_hashnext(const void* value, size_t size) {
  
  hashnext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.DiskBlockIndex.hashNext)
}
inline ::std::string* DiskBlockIndex::mutable_hashnext() {
  
  // @@protoc_insertion_point(field_mutable:Enze.DiskBlockIndex.hashNext)
  return hashnext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiskBlockIndex::release_hashnext() {
  // @@protoc_insertion_point(field_release:Enze.DiskBlockIndex.hashNext)
  
  return hashnext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiskBlockIndex::set_allocated_hashnext(::std::string* hashnext) {
  if (hashnext != NULL) {
    
  } else {
    
  }
  hashnext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashnext);
  // @@protoc_insertion_point(field_set_allocated:Enze.DiskBlockIndex.hashNext)
}

// bytes hashPrev = 2;
inline void DiskBlockIndex::clear_hashprev() {
  hashprev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiskBlockIndex::hashprev() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.hashPrev)
  return hashprev_.GetNoArena();
}
inline void DiskBlockIndex::set_hashprev(const ::std::string& value) {
  
  hashprev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.hashPrev)
}
#if LANG_CXX11
inline void DiskBlockIndex::set_hashprev(::std::string&& value) {
  
  hashprev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.DiskBlockIndex.hashPrev)
}
#endif
inline void DiskBlockIndex::set_hashprev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashprev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.DiskBlockIndex.hashPrev)
}
inline void DiskBlockIndex::set_hashprev(const void* value, size_t size) {
  
  hashprev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.DiskBlockIndex.hashPrev)
}
inline ::std::string* DiskBlockIndex::mutable_hashprev() {
  
  // @@protoc_insertion_point(field_mutable:Enze.DiskBlockIndex.hashPrev)
  return hashprev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiskBlockIndex::release_hashprev() {
  // @@protoc_insertion_point(field_release:Enze.DiskBlockIndex.hashPrev)
  
  return hashprev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiskBlockIndex::set_allocated_hashprev(::std::string* hashprev) {
  if (hashprev != NULL) {
    
  } else {
    
  }
  hashprev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashprev);
  // @@protoc_insertion_point(field_set_allocated:Enze.DiskBlockIndex.hashPrev)
}

// uint32 nFile = 3;
inline void DiskBlockIndex::clear_nfile() {
  nfile_ = 0u;
}
inline ::google::protobuf::uint32 DiskBlockIndex::nfile() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.nFile)
  return nfile_;
}
inline void DiskBlockIndex::set_nfile(::google::protobuf::uint32 value) {
  
  nfile_ = value;
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.nFile)
}

// uint32 nBlockpos = 4;
inline void DiskBlockIndex::clear_nblockpos() {
  nblockpos_ = 0u;
}
inline ::google::protobuf::uint32 DiskBlockIndex::nblockpos() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.nBlockpos)
  return nblockpos_;
}
inline void DiskBlockIndex::set_nblockpos(::google::protobuf::uint32 value) {
  
  nblockpos_ = value;
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.nBlockpos)
}

// uint32 nHeight = 5;
inline void DiskBlockIndex::clear_nheight() {
  nheight_ = 0u;
}
inline ::google::protobuf::uint32 DiskBlockIndex::nheight() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.nHeight)
  return nheight_;
}
inline void DiskBlockIndex::set_nheight(::google::protobuf::uint32 value) {
  
  nheight_ = value;
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.nHeight)
}

// uint32 nVersion = 6;
inline void DiskBlockIndex::clear_nversion() {
  nversion_ = 0u;
}
inline ::google::protobuf::uint32 DiskBlockIndex::nversion() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.nVersion)
  return nversion_;
}
inline void DiskBlockIndex::set_nversion(::google::protobuf::uint32 value) {
  
  nversion_ = value;
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.nVersion)
}

// uint32 nTime = 7;
inline void DiskBlockIndex::clear_ntime() {
  ntime_ = 0u;
}
inline ::google::protobuf::uint32 DiskBlockIndex::ntime() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.nTime)
  return ntime_;
}
inline void DiskBlockIndex::set_ntime(::google::protobuf::uint32 value) {
  
  ntime_ = value;
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.nTime)
}

// uint32 nBit = 8;
inline void DiskBlockIndex::clear_nbit() {
  nbit_ = 0u;
}
inline ::google::protobuf::uint32 DiskBlockIndex::nbit() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.nBit)
  return nbit_;
}
inline void DiskBlockIndex::set_nbit(::google::protobuf::uint32 value) {
  
  nbit_ = value;
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.nBit)
}

// uint32 nNonce = 9;
inline void DiskBlockIndex::clear_nnonce() {
  nnonce_ = 0u;
}
inline ::google::protobuf::uint32 DiskBlockIndex::nnonce() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.nNonce)
  return nnonce_;
}
inline void DiskBlockIndex::set_nnonce(::google::protobuf::uint32 value) {
  
  nnonce_ = value;
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.nNonce)
}

// bytes hashMerkleRoot = 10;
inline void DiskBlockIndex::clear_hashmerkleroot() {
  hashmerkleroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DiskBlockIndex::hashmerkleroot() const {
  // @@protoc_insertion_point(field_get:Enze.DiskBlockIndex.hashMerkleRoot)
  return hashmerkleroot_.GetNoArena();
}
inline void DiskBlockIndex::set_hashmerkleroot(const ::std::string& value) {
  
  hashmerkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.DiskBlockIndex.hashMerkleRoot)
}
#if LANG_CXX11
inline void DiskBlockIndex::set_hashmerkleroot(::std::string&& value) {
  
  hashmerkleroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.DiskBlockIndex.hashMerkleRoot)
}
#endif
inline void DiskBlockIndex::set_hashmerkleroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashmerkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.DiskBlockIndex.hashMerkleRoot)
}
inline void DiskBlockIndex::set_hashmerkleroot(const void* value, size_t size) {
  
  hashmerkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.DiskBlockIndex.hashMerkleRoot)
}
inline ::std::string* DiskBlockIndex::mutable_hashmerkleroot() {
  
  // @@protoc_insertion_point(field_mutable:Enze.DiskBlockIndex.hashMerkleRoot)
  return hashmerkleroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DiskBlockIndex::release_hashmerkleroot() {
  // @@protoc_insertion_point(field_release:Enze.DiskBlockIndex.hashMerkleRoot)
  
  return hashmerkleroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DiskBlockIndex::set_allocated_hashmerkleroot(::std::string* hashmerkleroot) {
  if (hashmerkleroot != NULL) {
    
  } else {
    
  }
  hashmerkleroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashmerkleroot);
  // @@protoc_insertion_point(field_set_allocated:Enze.DiskBlockIndex.hashMerkleRoot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Enze

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_DiskBlockIndex_2eproto
