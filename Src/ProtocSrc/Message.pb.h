// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_INCLUDED_Message_2eproto
#define PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Address.pb.h"
#include "MessageHeader.pb.h"
#include "Block.pb.h"
#include "GetBlocks.pb.h"
#include "Inventory.pb.h"
#include "Order.pb.h"
#include "Review.pb.h"
#include "Transaction.pb.h"
#include "Version.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Message_2eproto();
namespace Enze {
class MessageData;
class MessageDataDefaultTypeInternal;
extern MessageDataDefaultTypeInternal _MessageData_default_instance_;
}  // namespace Enze
namespace google {
namespace protobuf {
template<> ::Enze::MessageData* Arena::CreateMaybeMessage<::Enze::MessageData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Enze {

// ===================================================================

class MessageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.MessageData) */ {
 public:
  MessageData();
  virtual ~MessageData();

  MessageData(const MessageData& from);

  inline MessageData& operator=(const MessageData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageData(MessageData&& from) noexcept
    : MessageData() {
    *this = ::std::move(from);
  }

  inline MessageData& operator=(MessageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MessageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageData* internal_default_instance() {
    return reinterpret_cast<const MessageData*>(
               &_MessageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessageData* other);
  friend void swap(MessageData& a, MessageData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageData* New() const final {
    return CreateMaybeMessage<MessageData>(NULL);
  }

  MessageData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageData& from);
  void MergeFrom(const MessageData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Enze.Address vAddr = 3;
  int vaddr_size() const;
  void clear_vaddr();
  static const int kVAddrFieldNumber = 3;
  ::Enze::Address* mutable_vaddr(int index);
  ::google::protobuf::RepeatedPtrField< ::Enze::Address >*
      mutable_vaddr();
  const ::Enze::Address& vaddr(int index) const;
  ::Enze::Address* add_vaddr();
  const ::google::protobuf::RepeatedPtrField< ::Enze::Address >&
      vaddr() const;

  // repeated .Enze.Inventory vInv = 4;
  int vinv_size() const;
  void clear_vinv();
  static const int kVInvFieldNumber = 4;
  ::Enze::Inventory* mutable_vinv(int index);
  ::google::protobuf::RepeatedPtrField< ::Enze::Inventory >*
      mutable_vinv();
  const ::Enze::Inventory& vinv(int index) const;
  ::Enze::Inventory* add_vinv();
  const ::google::protobuf::RepeatedPtrField< ::Enze::Inventory >&
      vinv() const;

  // string hashreply = 10;
  void clear_hashreply();
  static const int kHashreplyFieldNumber = 10;
  const ::std::string& hashreply() const;
  void set_hashreply(const ::std::string& value);
  #if LANG_CXX11
  void set_hashreply(::std::string&& value);
  #endif
  void set_hashreply(const char* value);
  void set_hashreply(const char* value, size_t size);
  ::std::string* mutable_hashreply();
  ::std::string* release_hashreply();
  void set_allocated_hashreply(::std::string* hashreply);

  // .Enze.MessageHeader cMsgHead = 1;
  bool has_cmsghead() const;
  void clear_cmsghead();
  static const int kCMsgHeadFieldNumber = 1;
  const ::Enze::MessageHeader& cmsghead() const;
  ::Enze::MessageHeader* release_cmsghead();
  ::Enze::MessageHeader* mutable_cmsghead();
  void set_allocated_cmsghead(::Enze::MessageHeader* cmsghead);

  // .Enze.Version cVersion = 2;
  bool has_cversion() const;
  void clear_cversion();
  static const int kCVersionFieldNumber = 2;
  const ::Enze::Version& cversion() const;
  ::Enze::Version* release_cversion();
  ::Enze::Version* mutable_cversion();
  void set_allocated_cversion(::Enze::Version* cversion);

  // .Enze.GetBlocks getBlocks = 5;
  bool has_getblocks() const;
  void clear_getblocks();
  static const int kGetBlocksFieldNumber = 5;
  const ::Enze::GetBlocks& getblocks() const;
  ::Enze::GetBlocks* release_getblocks();
  ::Enze::GetBlocks* mutable_getblocks();
  void set_allocated_getblocks(::Enze::GetBlocks* getblocks);

  // .Enze.Transaction tx = 6;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 6;
  const ::Enze::Transaction& tx() const;
  ::Enze::Transaction* release_tx();
  ::Enze::Transaction* mutable_tx();
  void set_allocated_tx(::Enze::Transaction* tx);

  // .Enze.Review cReview = 7;
  bool has_creview() const;
  void clear_creview();
  static const int kCReviewFieldNumber = 7;
  const ::Enze::Review& creview() const;
  ::Enze::Review* release_creview();
  ::Enze::Review* mutable_creview();
  void set_allocated_creview(::Enze::Review* creview);

  // .Enze.Order cOrder = 8;
  bool has_corder() const;
  void clear_corder();
  static const int kCOrderFieldNumber = 8;
  const ::Enze::Order& corder() const;
  ::Enze::Order* release_corder();
  ::Enze::Order* mutable_corder();
  void set_allocated_corder(::Enze::Order* corder);

  // .Enze.Block cblock = 9;
  bool has_cblock() const;
  void clear_cblock();
  static const int kCblockFieldNumber = 9;
  const ::Enze::Block& cblock() const;
  ::Enze::Block* release_cblock();
  ::Enze::Block* mutable_cblock();
  void set_allocated_cblock(::Enze::Block* cblock);

  // @@protoc_insertion_point(class_scope:Enze.MessageData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Enze::Address > vaddr_;
  ::google::protobuf::RepeatedPtrField< ::Enze::Inventory > vinv_;
  ::google::protobuf::internal::ArenaStringPtr hashreply_;
  ::Enze::MessageHeader* cmsghead_;
  ::Enze::Version* cversion_;
  ::Enze::GetBlocks* getblocks_;
  ::Enze::Transaction* tx_;
  ::Enze::Review* creview_;
  ::Enze::Order* corder_;
  ::Enze::Block* cblock_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageData

// .Enze.MessageHeader cMsgHead = 1;
inline bool MessageData::has_cmsghead() const {
  return this != internal_default_instance() && cmsghead_ != NULL;
}
inline const ::Enze::MessageHeader& MessageData::cmsghead() const {
  const ::Enze::MessageHeader* p = cmsghead_;
  // @@protoc_insertion_point(field_get:Enze.MessageData.cMsgHead)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::MessageHeader*>(
      &::Enze::_MessageHeader_default_instance_);
}
inline ::Enze::MessageHeader* MessageData::release_cmsghead() {
  // @@protoc_insertion_point(field_release:Enze.MessageData.cMsgHead)
  
  ::Enze::MessageHeader* temp = cmsghead_;
  cmsghead_ = NULL;
  return temp;
}
inline ::Enze::MessageHeader* MessageData::mutable_cmsghead() {
  
  if (cmsghead_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::MessageHeader>(GetArenaNoVirtual());
    cmsghead_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.cMsgHead)
  return cmsghead_;
}
inline void MessageData::set_allocated_cmsghead(::Enze::MessageHeader* cmsghead) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cmsghead_);
  }
  if (cmsghead) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cmsghead = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cmsghead, submessage_arena);
    }
    
  } else {
    
  }
  cmsghead_ = cmsghead;
  // @@protoc_insertion_point(field_set_allocated:Enze.MessageData.cMsgHead)
}

// .Enze.Version cVersion = 2;
inline bool MessageData::has_cversion() const {
  return this != internal_default_instance() && cversion_ != NULL;
}
inline const ::Enze::Version& MessageData::cversion() const {
  const ::Enze::Version* p = cversion_;
  // @@protoc_insertion_point(field_get:Enze.MessageData.cVersion)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::Version*>(
      &::Enze::_Version_default_instance_);
}
inline ::Enze::Version* MessageData::release_cversion() {
  // @@protoc_insertion_point(field_release:Enze.MessageData.cVersion)
  
  ::Enze::Version* temp = cversion_;
  cversion_ = NULL;
  return temp;
}
inline ::Enze::Version* MessageData::mutable_cversion() {
  
  if (cversion_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::Version>(GetArenaNoVirtual());
    cversion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.cVersion)
  return cversion_;
}
inline void MessageData::set_allocated_cversion(::Enze::Version* cversion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cversion_);
  }
  if (cversion) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cversion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cversion, submessage_arena);
    }
    
  } else {
    
  }
  cversion_ = cversion;
  // @@protoc_insertion_point(field_set_allocated:Enze.MessageData.cVersion)
}

// repeated .Enze.Address vAddr = 3;
inline int MessageData::vaddr_size() const {
  return vaddr_.size();
}
inline ::Enze::Address* MessageData::mutable_vaddr(int index) {
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.vAddr)
  return vaddr_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Enze::Address >*
MessageData::mutable_vaddr() {
  // @@protoc_insertion_point(field_mutable_list:Enze.MessageData.vAddr)
  return &vaddr_;
}
inline const ::Enze::Address& MessageData::vaddr(int index) const {
  // @@protoc_insertion_point(field_get:Enze.MessageData.vAddr)
  return vaddr_.Get(index);
}
inline ::Enze::Address* MessageData::add_vaddr() {
  // @@protoc_insertion_point(field_add:Enze.MessageData.vAddr)
  return vaddr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Enze::Address >&
MessageData::vaddr() const {
  // @@protoc_insertion_point(field_list:Enze.MessageData.vAddr)
  return vaddr_;
}

// repeated .Enze.Inventory vInv = 4;
inline int MessageData::vinv_size() const {
  return vinv_.size();
}
inline ::Enze::Inventory* MessageData::mutable_vinv(int index) {
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.vInv)
  return vinv_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Enze::Inventory >*
MessageData::mutable_vinv() {
  // @@protoc_insertion_point(field_mutable_list:Enze.MessageData.vInv)
  return &vinv_;
}
inline const ::Enze::Inventory& MessageData::vinv(int index) const {
  // @@protoc_insertion_point(field_get:Enze.MessageData.vInv)
  return vinv_.Get(index);
}
inline ::Enze::Inventory* MessageData::add_vinv() {
  // @@protoc_insertion_point(field_add:Enze.MessageData.vInv)
  return vinv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Enze::Inventory >&
MessageData::vinv() const {
  // @@protoc_insertion_point(field_list:Enze.MessageData.vInv)
  return vinv_;
}

// .Enze.GetBlocks getBlocks = 5;
inline bool MessageData::has_getblocks() const {
  return this != internal_default_instance() && getblocks_ != NULL;
}
inline const ::Enze::GetBlocks& MessageData::getblocks() const {
  const ::Enze::GetBlocks* p = getblocks_;
  // @@protoc_insertion_point(field_get:Enze.MessageData.getBlocks)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::GetBlocks*>(
      &::Enze::_GetBlocks_default_instance_);
}
inline ::Enze::GetBlocks* MessageData::release_getblocks() {
  // @@protoc_insertion_point(field_release:Enze.MessageData.getBlocks)
  
  ::Enze::GetBlocks* temp = getblocks_;
  getblocks_ = NULL;
  return temp;
}
inline ::Enze::GetBlocks* MessageData::mutable_getblocks() {
  
  if (getblocks_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::GetBlocks>(GetArenaNoVirtual());
    getblocks_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.getBlocks)
  return getblocks_;
}
inline void MessageData::set_allocated_getblocks(::Enze::GetBlocks* getblocks) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(getblocks_);
  }
  if (getblocks) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      getblocks = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, getblocks, submessage_arena);
    }
    
  } else {
    
  }
  getblocks_ = getblocks;
  // @@protoc_insertion_point(field_set_allocated:Enze.MessageData.getBlocks)
}

// .Enze.Transaction tx = 6;
inline bool MessageData::has_tx() const {
  return this != internal_default_instance() && tx_ != NULL;
}
inline const ::Enze::Transaction& MessageData::tx() const {
  const ::Enze::Transaction* p = tx_;
  // @@protoc_insertion_point(field_get:Enze.MessageData.tx)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::Transaction*>(
      &::Enze::_Transaction_default_instance_);
}
inline ::Enze::Transaction* MessageData::release_tx() {
  // @@protoc_insertion_point(field_release:Enze.MessageData.tx)
  
  ::Enze::Transaction* temp = tx_;
  tx_ = NULL;
  return temp;
}
inline ::Enze::Transaction* MessageData::mutable_tx() {
  
  if (tx_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::Transaction>(GetArenaNoVirtual());
    tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.tx)
  return tx_;
}
inline void MessageData::set_allocated_tx(::Enze::Transaction* tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tx_);
  }
  if (tx) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    
  } else {
    
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:Enze.MessageData.tx)
}

// .Enze.Review cReview = 7;
inline bool MessageData::has_creview() const {
  return this != internal_default_instance() && creview_ != NULL;
}
inline const ::Enze::Review& MessageData::creview() const {
  const ::Enze::Review* p = creview_;
  // @@protoc_insertion_point(field_get:Enze.MessageData.cReview)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::Review*>(
      &::Enze::_Review_default_instance_);
}
inline ::Enze::Review* MessageData::release_creview() {
  // @@protoc_insertion_point(field_release:Enze.MessageData.cReview)
  
  ::Enze::Review* temp = creview_;
  creview_ = NULL;
  return temp;
}
inline ::Enze::Review* MessageData::mutable_creview() {
  
  if (creview_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::Review>(GetArenaNoVirtual());
    creview_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.cReview)
  return creview_;
}
inline void MessageData::set_allocated_creview(::Enze::Review* creview) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(creview_);
  }
  if (creview) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      creview = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, creview, submessage_arena);
    }
    
  } else {
    
  }
  creview_ = creview;
  // @@protoc_insertion_point(field_set_allocated:Enze.MessageData.cReview)
}

// .Enze.Order cOrder = 8;
inline bool MessageData::has_corder() const {
  return this != internal_default_instance() && corder_ != NULL;
}
inline const ::Enze::Order& MessageData::corder() const {
  const ::Enze::Order* p = corder_;
  // @@protoc_insertion_point(field_get:Enze.MessageData.cOrder)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::Order*>(
      &::Enze::_Order_default_instance_);
}
inline ::Enze::Order* MessageData::release_corder() {
  // @@protoc_insertion_point(field_release:Enze.MessageData.cOrder)
  
  ::Enze::Order* temp = corder_;
  corder_ = NULL;
  return temp;
}
inline ::Enze::Order* MessageData::mutable_corder() {
  
  if (corder_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::Order>(GetArenaNoVirtual());
    corder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.cOrder)
  return corder_;
}
inline void MessageData::set_allocated_corder(::Enze::Order* corder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(corder_);
  }
  if (corder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      corder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, corder, submessage_arena);
    }
    
  } else {
    
  }
  corder_ = corder;
  // @@protoc_insertion_point(field_set_allocated:Enze.MessageData.cOrder)
}

// .Enze.Block cblock = 9;
inline bool MessageData::has_cblock() const {
  return this != internal_default_instance() && cblock_ != NULL;
}
inline const ::Enze::Block& MessageData::cblock() const {
  const ::Enze::Block* p = cblock_;
  // @@protoc_insertion_point(field_get:Enze.MessageData.cblock)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::Block*>(
      &::Enze::_Block_default_instance_);
}
inline ::Enze::Block* MessageData::release_cblock() {
  // @@protoc_insertion_point(field_release:Enze.MessageData.cblock)
  
  ::Enze::Block* temp = cblock_;
  cblock_ = NULL;
  return temp;
}
inline ::Enze::Block* MessageData::mutable_cblock() {
  
  if (cblock_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::Block>(GetArenaNoVirtual());
    cblock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.cblock)
  return cblock_;
}
inline void MessageData::set_allocated_cblock(::Enze::Block* cblock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cblock_);
  }
  if (cblock) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cblock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cblock, submessage_arena);
    }
    
  } else {
    
  }
  cblock_ = cblock;
  // @@protoc_insertion_point(field_set_allocated:Enze.MessageData.cblock)
}

// string hashreply = 10;
inline void MessageData::clear_hashreply() {
  hashreply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageData::hashreply() const {
  // @@protoc_insertion_point(field_get:Enze.MessageData.hashreply)
  return hashreply_.GetNoArena();
}
inline void MessageData::set_hashreply(const ::std::string& value) {
  
  hashreply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.MessageData.hashreply)
}
#if LANG_CXX11
inline void MessageData::set_hashreply(::std::string&& value) {
  
  hashreply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.MessageData.hashreply)
}
#endif
inline void MessageData::set_hashreply(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashreply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.MessageData.hashreply)
}
inline void MessageData::set_hashreply(const char* value, size_t size) {
  
  hashreply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.MessageData.hashreply)
}
inline ::std::string* MessageData::mutable_hashreply() {
  
  // @@protoc_insertion_point(field_mutable:Enze.MessageData.hashreply)
  return hashreply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageData::release_hashreply() {
  // @@protoc_insertion_point(field_release:Enze.MessageData.hashreply)
  
  return hashreply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageData::set_allocated_hashreply(::std::string* hashreply) {
  if (hashreply != NULL) {
    
  } else {
    
  }
  hashreply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashreply);
  // @@protoc_insertion_point(field_set_allocated:Enze.MessageData.hashreply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Enze

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Message_2eproto
