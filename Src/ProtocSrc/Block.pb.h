// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Block.proto

#ifndef PROTOBUF_INCLUDED_Block_2eproto
#define PROTOBUF_INCLUDED_Block_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Block_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Block_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Block_2eproto();
namespace Enze {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace Enze
namespace google {
namespace protobuf {
template<> ::Enze::Block* Arena::CreateMaybeMessage<::Enze::Block>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Enze {

// ===================================================================

class Block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(NULL);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Enze.Transaction vTrans = 7;
  int vtrans_size() const;
  void clear_vtrans();
  static const int kVTransFieldNumber = 7;
  ::Enze::Transaction* mutable_vtrans(int index);
  ::google::protobuf::RepeatedPtrField< ::Enze::Transaction >*
      mutable_vtrans();
  const ::Enze::Transaction& vtrans(int index) const;
  ::Enze::Transaction* add_vtrans();
  const ::google::protobuf::RepeatedPtrField< ::Enze::Transaction >&
      vtrans() const;

  // repeated string vMerkleTree = 8;
  int vmerkletree_size() const;
  void clear_vmerkletree();
  static const int kVMerkleTreeFieldNumber = 8;
  const ::std::string& vmerkletree(int index) const;
  ::std::string* mutable_vmerkletree(int index);
  void set_vmerkletree(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vmerkletree(int index, ::std::string&& value);
  #endif
  void set_vmerkletree(int index, const char* value);
  void set_vmerkletree(int index, const char* value, size_t size);
  ::std::string* add_vmerkletree();
  void add_vmerkletree(const ::std::string& value);
  #if LANG_CXX11
  void add_vmerkletree(::std::string&& value);
  #endif
  void add_vmerkletree(const char* value);
  void add_vmerkletree(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& vmerkletree() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_vmerkletree();

  // string hashPrevBlock = 2;
  void clear_hashprevblock();
  static const int kHashPrevBlockFieldNumber = 2;
  const ::std::string& hashprevblock() const;
  void set_hashprevblock(const ::std::string& value);
  #if LANG_CXX11
  void set_hashprevblock(::std::string&& value);
  #endif
  void set_hashprevblock(const char* value);
  void set_hashprevblock(const char* value, size_t size);
  ::std::string* mutable_hashprevblock();
  ::std::string* release_hashprevblock();
  void set_allocated_hashprevblock(::std::string* hashprevblock);

  // string hashMerkleRoot = 3;
  void clear_hashmerkleroot();
  static const int kHashMerkleRootFieldNumber = 3;
  const ::std::string& hashmerkleroot() const;
  void set_hashmerkleroot(const ::std::string& value);
  #if LANG_CXX11
  void set_hashmerkleroot(::std::string&& value);
  #endif
  void set_hashmerkleroot(const char* value);
  void set_hashmerkleroot(const char* value, size_t size);
  ::std::string* mutable_hashmerkleroot();
  ::std::string* release_hashmerkleroot();
  void set_allocated_hashmerkleroot(::std::string* hashmerkleroot);

  // int32 nCurVersion = 1;
  void clear_ncurversion();
  static const int kNCurVersionFieldNumber = 1;
  ::google::protobuf::int32 ncurversion() const;
  void set_ncurversion(::google::protobuf::int32 value);

  // uint32 m_uTime = 4;
  void clear_m_utime();
  static const int kMUTimeFieldNumber = 4;
  ::google::protobuf::uint32 m_utime() const;
  void set_m_utime(::google::protobuf::uint32 value);

  // uint32 uBits = 5;
  void clear_ubits();
  static const int kUBitsFieldNumber = 5;
  ::google::protobuf::uint32 ubits() const;
  void set_ubits(::google::protobuf::uint32 value);

  // uint32 uNonce = 6;
  void clear_unonce();
  static const int kUNonceFieldNumber = 6;
  ::google::protobuf::uint32 unonce() const;
  void set_unonce(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Enze.Block)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Enze::Transaction > vtrans_;
  ::google::protobuf::RepeatedPtrField<::std::string> vmerkletree_;
  ::google::protobuf::internal::ArenaStringPtr hashprevblock_;
  ::google::protobuf::internal::ArenaStringPtr hashmerkleroot_;
  ::google::protobuf::int32 ncurversion_;
  ::google::protobuf::uint32 m_utime_;
  ::google::protobuf::uint32 ubits_;
  ::google::protobuf::uint32 unonce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Block_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// int32 nCurVersion = 1;
inline void Block::clear_ncurversion() {
  ncurversion_ = 0;
}
inline ::google::protobuf::int32 Block::ncurversion() const {
  // @@protoc_insertion_point(field_get:Enze.Block.nCurVersion)
  return ncurversion_;
}
inline void Block::set_ncurversion(::google::protobuf::int32 value) {
  
  ncurversion_ = value;
  // @@protoc_insertion_point(field_set:Enze.Block.nCurVersion)
}

// string hashPrevBlock = 2;
inline void Block::clear_hashprevblock() {
  hashprevblock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::hashprevblock() const {
  // @@protoc_insertion_point(field_get:Enze.Block.hashPrevBlock)
  return hashprevblock_.GetNoArena();
}
inline void Block::set_hashprevblock(const ::std::string& value) {
  
  hashprevblock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.Block.hashPrevBlock)
}
#if LANG_CXX11
inline void Block::set_hashprevblock(::std::string&& value) {
  
  hashprevblock_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.Block.hashPrevBlock)
}
#endif
inline void Block::set_hashprevblock(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashprevblock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.Block.hashPrevBlock)
}
inline void Block::set_hashprevblock(const char* value, size_t size) {
  
  hashprevblock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.Block.hashPrevBlock)
}
inline ::std::string* Block::mutable_hashprevblock() {
  
  // @@protoc_insertion_point(field_mutable:Enze.Block.hashPrevBlock)
  return hashprevblock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_hashprevblock() {
  // @@protoc_insertion_point(field_release:Enze.Block.hashPrevBlock)
  
  return hashprevblock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_hashprevblock(::std::string* hashprevblock) {
  if (hashprevblock != NULL) {
    
  } else {
    
  }
  hashprevblock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashprevblock);
  // @@protoc_insertion_point(field_set_allocated:Enze.Block.hashPrevBlock)
}

// string hashMerkleRoot = 3;
inline void Block::clear_hashmerkleroot() {
  hashmerkleroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Block::hashmerkleroot() const {
  // @@protoc_insertion_point(field_get:Enze.Block.hashMerkleRoot)
  return hashmerkleroot_.GetNoArena();
}
inline void Block::set_hashmerkleroot(const ::std::string& value) {
  
  hashmerkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.Block.hashMerkleRoot)
}
#if LANG_CXX11
inline void Block::set_hashmerkleroot(::std::string&& value) {
  
  hashmerkleroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.Block.hashMerkleRoot)
}
#endif
inline void Block::set_hashmerkleroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashmerkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.Block.hashMerkleRoot)
}
inline void Block::set_hashmerkleroot(const char* value, size_t size) {
  
  hashmerkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.Block.hashMerkleRoot)
}
inline ::std::string* Block::mutable_hashmerkleroot() {
  
  // @@protoc_insertion_point(field_mutable:Enze.Block.hashMerkleRoot)
  return hashmerkleroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Block::release_hashmerkleroot() {
  // @@protoc_insertion_point(field_release:Enze.Block.hashMerkleRoot)
  
  return hashmerkleroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Block::set_allocated_hashmerkleroot(::std::string* hashmerkleroot) {
  if (hashmerkleroot != NULL) {
    
  } else {
    
  }
  hashmerkleroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashmerkleroot);
  // @@protoc_insertion_point(field_set_allocated:Enze.Block.hashMerkleRoot)
}

// uint32 m_uTime = 4;
inline void Block::clear_m_utime() {
  m_utime_ = 0u;
}
inline ::google::protobuf::uint32 Block::m_utime() const {
  // @@protoc_insertion_point(field_get:Enze.Block.m_uTime)
  return m_utime_;
}
inline void Block::set_m_utime(::google::protobuf::uint32 value) {
  
  m_utime_ = value;
  // @@protoc_insertion_point(field_set:Enze.Block.m_uTime)
}

// uint32 uBits = 5;
inline void Block::clear_ubits() {
  ubits_ = 0u;
}
inline ::google::protobuf::uint32 Block::ubits() const {
  // @@protoc_insertion_point(field_get:Enze.Block.uBits)
  return ubits_;
}
inline void Block::set_ubits(::google::protobuf::uint32 value) {
  
  ubits_ = value;
  // @@protoc_insertion_point(field_set:Enze.Block.uBits)
}

// uint32 uNonce = 6;
inline void Block::clear_unonce() {
  unonce_ = 0u;
}
inline ::google::protobuf::uint32 Block::unonce() const {
  // @@protoc_insertion_point(field_get:Enze.Block.uNonce)
  return unonce_;
}
inline void Block::set_unonce(::google::protobuf::uint32 value) {
  
  unonce_ = value;
  // @@protoc_insertion_point(field_set:Enze.Block.uNonce)
}

// repeated .Enze.Transaction vTrans = 7;
inline int Block::vtrans_size() const {
  return vtrans_.size();
}
inline ::Enze::Transaction* Block::mutable_vtrans(int index) {
  // @@protoc_insertion_point(field_mutable:Enze.Block.vTrans)
  return vtrans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Enze::Transaction >*
Block::mutable_vtrans() {
  // @@protoc_insertion_point(field_mutable_list:Enze.Block.vTrans)
  return &vtrans_;
}
inline const ::Enze::Transaction& Block::vtrans(int index) const {
  // @@protoc_insertion_point(field_get:Enze.Block.vTrans)
  return vtrans_.Get(index);
}
inline ::Enze::Transaction* Block::add_vtrans() {
  // @@protoc_insertion_point(field_add:Enze.Block.vTrans)
  return vtrans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Enze::Transaction >&
Block::vtrans() const {
  // @@protoc_insertion_point(field_list:Enze.Block.vTrans)
  return vtrans_;
}

// repeated string vMerkleTree = 8;
inline int Block::vmerkletree_size() const {
  return vmerkletree_.size();
}
inline void Block::clear_vmerkletree() {
  vmerkletree_.Clear();
}
inline const ::std::string& Block::vmerkletree(int index) const {
  // @@protoc_insertion_point(field_get:Enze.Block.vMerkleTree)
  return vmerkletree_.Get(index);
}
inline ::std::string* Block::mutable_vmerkletree(int index) {
  // @@protoc_insertion_point(field_mutable:Enze.Block.vMerkleTree)
  return vmerkletree_.Mutable(index);
}
inline void Block::set_vmerkletree(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Enze.Block.vMerkleTree)
  vmerkletree_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Block::set_vmerkletree(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Enze.Block.vMerkleTree)
  vmerkletree_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Block::set_vmerkletree(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vmerkletree_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Enze.Block.vMerkleTree)
}
inline void Block::set_vmerkletree(int index, const char* value, size_t size) {
  vmerkletree_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Enze.Block.vMerkleTree)
}
inline ::std::string* Block::add_vmerkletree() {
  // @@protoc_insertion_point(field_add_mutable:Enze.Block.vMerkleTree)
  return vmerkletree_.Add();
}
inline void Block::add_vmerkletree(const ::std::string& value) {
  vmerkletree_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Enze.Block.vMerkleTree)
}
#if LANG_CXX11
inline void Block::add_vmerkletree(::std::string&& value) {
  vmerkletree_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Enze.Block.vMerkleTree)
}
#endif
inline void Block::add_vmerkletree(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vmerkletree_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Enze.Block.vMerkleTree)
}
inline void Block::add_vmerkletree(const char* value, size_t size) {
  vmerkletree_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Enze.Block.vMerkleTree)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Block::vmerkletree() const {
  // @@protoc_insertion_point(field_list:Enze.Block.vMerkleTree)
  return vmerkletree_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Block::mutable_vmerkletree() {
  // @@protoc_insertion_point(field_mutable_list:Enze.Block.vMerkleTree)
  return &vmerkletree_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Enze

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Block_2eproto
