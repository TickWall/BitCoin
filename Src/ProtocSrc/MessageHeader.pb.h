// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageHeader.proto

#ifndef PROTOBUF_INCLUDED_MessageHeader_2eproto
#define PROTOBUF_INCLUDED_MessageHeader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MessageHeader_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageHeader_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_MessageHeader_2eproto();
namespace Enze {
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
}  // namespace Enze
namespace google {
namespace protobuf {
template<> ::Enze::MessageHeader* Arena::CreateMaybeMessage<::Enze::MessageHeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Enze {

enum MessageHeader_Mesg_Kind {
  MessageHeader_Mesg_Kind_MK_Version = 0,
  MessageHeader_Mesg_Kind_MK_Addr = 1,
  MessageHeader_Mesg_Kind_MK_Inv = 2,
  MessageHeader_Mesg_Kind_MK_GetData = 3,
  MessageHeader_Mesg_Kind_MK_GetBlocks = 4,
  MessageHeader_Mesg_Kind_MK_Tx = 5,
  MessageHeader_Mesg_Kind_MK_Review = 6,
  MessageHeader_Mesg_Kind_MK_Block = 7,
  MessageHeader_Mesg_Kind_MK_GetAddr = 8,
  MessageHeader_Mesg_Kind_MK_CheckOrder = 9,
  MessageHeader_Mesg_Kind_MK_SubmitOrder = 10,
  MessageHeader_Mesg_Kind_MK_Reply = 11,
  MessageHeader_Mesg_Kind_MessageHeader_Mesg_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  MessageHeader_Mesg_Kind_MessageHeader_Mesg_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool MessageHeader_Mesg_Kind_IsValid(int value);
const MessageHeader_Mesg_Kind MessageHeader_Mesg_Kind_Mesg_Kind_MIN = MessageHeader_Mesg_Kind_MK_Version;
const MessageHeader_Mesg_Kind MessageHeader_Mesg_Kind_Mesg_Kind_MAX = MessageHeader_Mesg_Kind_MK_Reply;
const int MessageHeader_Mesg_Kind_Mesg_Kind_ARRAYSIZE = MessageHeader_Mesg_Kind_Mesg_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageHeader_Mesg_Kind_descriptor();
inline const ::std::string& MessageHeader_Mesg_Kind_Name(MessageHeader_Mesg_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageHeader_Mesg_Kind_descriptor(), value);
}
inline bool MessageHeader_Mesg_Kind_Parse(
    const ::std::string& name, MessageHeader_Mesg_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageHeader_Mesg_Kind>(
    MessageHeader_Mesg_Kind_descriptor(), name, value);
}
// ===================================================================

class MessageHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.MessageHeader) */ {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessageHeader* other);
  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(NULL);
  }

  MessageHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MessageHeader_Mesg_Kind Mesg_Kind;
  static const Mesg_Kind MK_Version =
    MessageHeader_Mesg_Kind_MK_Version;
  static const Mesg_Kind MK_Addr =
    MessageHeader_Mesg_Kind_MK_Addr;
  static const Mesg_Kind MK_Inv =
    MessageHeader_Mesg_Kind_MK_Inv;
  static const Mesg_Kind MK_GetData =
    MessageHeader_Mesg_Kind_MK_GetData;
  static const Mesg_Kind MK_GetBlocks =
    MessageHeader_Mesg_Kind_MK_GetBlocks;
  static const Mesg_Kind MK_Tx =
    MessageHeader_Mesg_Kind_MK_Tx;
  static const Mesg_Kind MK_Review =
    MessageHeader_Mesg_Kind_MK_Review;
  static const Mesg_Kind MK_Block =
    MessageHeader_Mesg_Kind_MK_Block;
  static const Mesg_Kind MK_GetAddr =
    MessageHeader_Mesg_Kind_MK_GetAddr;
  static const Mesg_Kind MK_CheckOrder =
    MessageHeader_Mesg_Kind_MK_CheckOrder;
  static const Mesg_Kind MK_SubmitOrder =
    MessageHeader_Mesg_Kind_MK_SubmitOrder;
  static const Mesg_Kind MK_Reply =
    MessageHeader_Mesg_Kind_MK_Reply;
  static inline bool Mesg_Kind_IsValid(int value) {
    return MessageHeader_Mesg_Kind_IsValid(value);
  }
  static const Mesg_Kind Mesg_Kind_MIN =
    MessageHeader_Mesg_Kind_Mesg_Kind_MIN;
  static const Mesg_Kind Mesg_Kind_MAX =
    MessageHeader_Mesg_Kind_Mesg_Kind_MAX;
  static const int Mesg_Kind_ARRAYSIZE =
    MessageHeader_Mesg_Kind_Mesg_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mesg_Kind_descriptor() {
    return MessageHeader_Mesg_Kind_descriptor();
  }
  static inline const ::std::string& Mesg_Kind_Name(Mesg_Kind value) {
    return MessageHeader_Mesg_Kind_Name(value);
  }
  static inline bool Mesg_Kind_Parse(const ::std::string& name,
      Mesg_Kind* value) {
    return MessageHeader_Mesg_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string pchMessageStart = 1;
  void clear_pchmessagestart();
  static const int kPchMessageStartFieldNumber = 1;
  const ::std::string& pchmessagestart() const;
  void set_pchmessagestart(const ::std::string& value);
  #if LANG_CXX11
  void set_pchmessagestart(::std::string&& value);
  #endif
  void set_pchmessagestart(const char* value);
  void set_pchmessagestart(const char* value, size_t size);
  ::std::string* mutable_pchmessagestart();
  ::std::string* release_pchmessagestart();
  void set_allocated_pchmessagestart(::std::string* pchmessagestart);

  // .Enze.MessageHeader.Mesg_Kind eMsgKind = 2;
  void clear_emsgkind();
  static const int kEMsgKindFieldNumber = 2;
  ::Enze::MessageHeader_Mesg_Kind emsgkind() const;
  void set_emsgkind(::Enze::MessageHeader_Mesg_Kind value);

  // uint32 MessageSize = 3;
  void clear_messagesize();
  static const int kMessageSizeFieldNumber = 3;
  ::google::protobuf::uint32 messagesize() const;
  void set_messagesize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Enze.MessageHeader)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pchmessagestart_;
  int emsgkind_;
  ::google::protobuf::uint32 messagesize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MessageHeader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// string pchMessageStart = 1;
inline void MessageHeader::clear_pchmessagestart() {
  pchmessagestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageHeader::pchmessagestart() const {
  // @@protoc_insertion_point(field_get:Enze.MessageHeader.pchMessageStart)
  return pchmessagestart_.GetNoArena();
}
inline void MessageHeader::set_pchmessagestart(const ::std::string& value) {
  
  pchmessagestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.MessageHeader.pchMessageStart)
}
#if LANG_CXX11
inline void MessageHeader::set_pchmessagestart(::std::string&& value) {
  
  pchmessagestart_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.MessageHeader.pchMessageStart)
}
#endif
inline void MessageHeader::set_pchmessagestart(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pchmessagestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.MessageHeader.pchMessageStart)
}
inline void MessageHeader::set_pchmessagestart(const char* value, size_t size) {
  
  pchmessagestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.MessageHeader.pchMessageStart)
}
inline ::std::string* MessageHeader::mutable_pchmessagestart() {
  
  // @@protoc_insertion_point(field_mutable:Enze.MessageHeader.pchMessageStart)
  return pchmessagestart_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageHeader::release_pchmessagestart() {
  // @@protoc_insertion_point(field_release:Enze.MessageHeader.pchMessageStart)
  
  return pchmessagestart_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_allocated_pchmessagestart(::std::string* pchmessagestart) {
  if (pchmessagestart != NULL) {
    
  } else {
    
  }
  pchmessagestart_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pchmessagestart);
  // @@protoc_insertion_point(field_set_allocated:Enze.MessageHeader.pchMessageStart)
}

// .Enze.MessageHeader.Mesg_Kind eMsgKind = 2;
inline void MessageHeader::clear_emsgkind() {
  emsgkind_ = 0;
}
inline ::Enze::MessageHeader_Mesg_Kind MessageHeader::emsgkind() const {
  // @@protoc_insertion_point(field_get:Enze.MessageHeader.eMsgKind)
  return static_cast< ::Enze::MessageHeader_Mesg_Kind >(emsgkind_);
}
inline void MessageHeader::set_emsgkind(::Enze::MessageHeader_Mesg_Kind value) {
  
  emsgkind_ = value;
  // @@protoc_insertion_point(field_set:Enze.MessageHeader.eMsgKind)
}

// uint32 MessageSize = 3;
inline void MessageHeader::clear_messagesize() {
  messagesize_ = 0u;
}
inline ::google::protobuf::uint32 MessageHeader::messagesize() const {
  // @@protoc_insertion_point(field_get:Enze.MessageHeader.MessageSize)
  return messagesize_;
}
inline void MessageHeader::set_messagesize(::google::protobuf::uint32 value) {
  
  messagesize_ = value;
  // @@protoc_insertion_point(field_set:Enze.MessageHeader.MessageSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Enze

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Enze::MessageHeader_Mesg_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Enze::MessageHeader_Mesg_Kind>() {
  return ::Enze::MessageHeader_Mesg_Kind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_MessageHeader_2eproto
