// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Order.proto

#include "Order.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Order_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OrderForm_MapOrderEntry_DoNotUse_Order_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Order_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WalletTx_MapValueEntry_DoNotUse_Order_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Order_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MerkleTx_Order_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Order_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OrderForm_Order_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Order_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_WalletTx_Order_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Transaction_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Transaction_Transaction_2eproto;
namespace Enze {
class MerkleTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MerkleTx> _instance;
} _MerkleTx_default_instance_;
class OrderForm_MapOrderEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderForm_MapOrderEntry_DoNotUse> _instance;
} _OrderForm_MapOrderEntry_DoNotUse_default_instance_;
class OrderFormDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OrderForm> _instance;
} _OrderForm_default_instance_;
class WalletTx_MapValueEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WalletTx_MapValueEntry_DoNotUse> _instance;
} _WalletTx_MapValueEntry_DoNotUse_default_instance_;
class WalletTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WalletTx> _instance;
} _WalletTx_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
}  // namespace Enze
static void InitDefaultsMerkleTx_Order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Enze::_MerkleTx_default_instance_;
    new (ptr) ::Enze::MerkleTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Enze::MerkleTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MerkleTx_Order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMerkleTx_Order_2eproto}, {
      &scc_info_Transaction_Transaction_2eproto.base,}};

static void InitDefaultsOrderForm_MapOrderEntry_DoNotUse_Order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Enze::_OrderForm_MapOrderEntry_DoNotUse_default_instance_;
    new (ptr) ::Enze::OrderForm_MapOrderEntry_DoNotUse();
  }
  ::Enze::OrderForm_MapOrderEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OrderForm_MapOrderEntry_DoNotUse_Order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOrderForm_MapOrderEntry_DoNotUse_Order_2eproto}, {}};

static void InitDefaultsOrderForm_Order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Enze::_OrderForm_default_instance_;
    new (ptr) ::Enze::OrderForm();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Enze::OrderForm::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OrderForm_Order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrderForm_Order_2eproto}, {
      &scc_info_OrderForm_MapOrderEntry_DoNotUse_Order_2eproto.base,}};

static void InitDefaultsWalletTx_MapValueEntry_DoNotUse_Order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Enze::_WalletTx_MapValueEntry_DoNotUse_default_instance_;
    new (ptr) ::Enze::WalletTx_MapValueEntry_DoNotUse();
  }
  ::Enze::WalletTx_MapValueEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WalletTx_MapValueEntry_DoNotUse_Order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWalletTx_MapValueEntry_DoNotUse_Order_2eproto}, {}};

static void InitDefaultsWalletTx_Order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Enze::_WalletTx_default_instance_;
    new (ptr) ::Enze::WalletTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Enze::WalletTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_WalletTx_Order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsWalletTx_Order_2eproto}, {
      &scc_info_MerkleTx_Order_2eproto.base,
      &scc_info_WalletTx_MapValueEntry_DoNotUse_Order_2eproto.base,
      &scc_info_OrderForm_Order_2eproto.base,}};

static void InitDefaultsOrder_Order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Enze::_Order_default_instance_;
    new (ptr) ::Enze::Order();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Enze::Order::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Order_Order_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOrder_Order_2eproto}, {
      &scc_info_WalletTx_Order_2eproto.base,}};

void InitDefaults_Order_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MerkleTx_Order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderForm_MapOrderEntry_DoNotUse_Order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OrderForm_Order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WalletTx_MapValueEntry_DoNotUse_Order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WalletTx_Order_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Order_Order_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Order_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_Order_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Order_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Order_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Enze::MerkleTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Enze::MerkleTx, ctxinfo_),
  PROTOBUF_FIELD_OFFSET(::Enze::MerkleTx, hashblock_),
  PROTOBUF_FIELD_OFFSET(::Enze::MerkleTx, vmerklebranch_),
  PROTOBUF_FIELD_OFFSET(::Enze::MerkleTx, nindex_),
  PROTOBUF_FIELD_OFFSET(::Enze::MerkleTx, bmerkleverified_),
  PROTOBUF_FIELD_OFFSET(::Enze::OrderForm_MapOrderEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Enze::OrderForm_MapOrderEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Enze::OrderForm_MapOrderEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Enze::OrderForm_MapOrderEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Enze::OrderForm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Enze::OrderForm, maporder_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx_MapValueEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx_MapValueEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx_MapValueEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx_MapValueEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, cselfmekleinfo_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, vprevtx_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, mapvalue_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, orderlist_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, btimereceivedistxtime_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, utimereceived_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, m_bfromme_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, m_bspent_),
  PROTOBUF_FIELD_OFFSET(::Enze::WalletTx, utimedisplayed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Enze::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Enze::Order, hashreply_),
  PROTOBUF_FIELD_OFFSET(::Enze::Order, txorder_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Enze::MerkleTx)},
  { 10, 17, sizeof(::Enze::OrderForm_MapOrderEntry_DoNotUse)},
  { 19, -1, sizeof(::Enze::OrderForm)},
  { 25, 32, sizeof(::Enze::WalletTx_MapValueEntry_DoNotUse)},
  { 34, -1, sizeof(::Enze::WalletTx)},
  { 48, -1, sizeof(::Enze::Order)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Enze::_MerkleTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Enze::_OrderForm_MapOrderEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Enze::_OrderForm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Enze::_WalletTx_MapValueEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Enze::_WalletTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Enze::_Order_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Order_2eproto = {
  {}, AddDescriptors_Order_2eproto, "Order.proto", schemas,
  file_default_instances, TableStruct_Order_2eproto::offsets,
  file_level_metadata_Order_2eproto, 6, file_level_enum_descriptors_Order_2eproto, file_level_service_descriptors_Order_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_Order_2eproto = {
  false, InitDefaults_Order_2eproto, 
  "\n\013Order.proto\022\004Enze\032\021Transaction.proto\"\201"
  "\001\n\010MerkleTx\022\"\n\007cTxInfo\030\001 \001(\0132\021.Enze.Tran"
  "saction\022\021\n\thashBlock\030\002 \001(\t\022\025\n\rvMerkleBra"
  "nch\030\003 \003(\t\022\016\n\006nIndex\030\004 \001(\005\022\027\n\017bMerkleVeri"
  "fied\030\005 \001(\010\"m\n\tOrderForm\022/\n\010mapOrder\030\001 \003("
  "\0132\035.Enze.OrderForm.MapOrderEntry\032/\n\rMapO"
  "rderEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"\313\002\n\010WalletTx\022&\n\016cSelfMekleInfo\030\001 \001(\0132\016"
  ".Enze.MerkleTx\022\037\n\007vPrevTx\030\002 \003(\0132\016.Enze.M"
  "erkleTx\022.\n\010mapValue\030\003 \003(\0132\034.Enze.WalletT"
  "x.MapValueEntry\022\"\n\tOrderList\030\004 \003(\0132\017.Enz"
  "e.OrderForm\022\035\n\025bTimeReceivedIsTxTime\030\005 \001"
  "(\010\022\025\n\ruTimeReceived\030\006 \001(\r\022\021\n\tm_bFromMe\030\007"
  " \001(\010\022\020\n\010m_bSpent\030\010 \001(\010\022\026\n\016uTimeDisplayed"
  "\030\t \001(\r\032/\n\rMapValueEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\";\n\005Order\022\021\n\thashReply\030\001 "
  "\001(\t\022\037\n\007txOrder\030\002 \001(\0132\016.Enze.WalletTxb\006pr"
  "oto3"
,
  "Order.proto", &assign_descriptors_table_Order_2eproto, 684,
};

void AddDescriptors_Order_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_Transaction_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Order_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Order_2eproto = []() { AddDescriptors_Order_2eproto(); return true; }();
namespace Enze {

// ===================================================================

void MerkleTx::InitAsDefaultInstance() {
  ::Enze::_MerkleTx_default_instance_._instance.get_mutable()->ctxinfo_ = const_cast< ::Enze::Transaction*>(
      ::Enze::Transaction::internal_default_instance());
}
class MerkleTx::HasBitSetters {
 public:
  static const ::Enze::Transaction& ctxinfo(const MerkleTx* msg);
};

const ::Enze::Transaction&
MerkleTx::HasBitSetters::ctxinfo(const MerkleTx* msg) {
  return *msg->ctxinfo_;
}
void MerkleTx::clear_ctxinfo() {
  if (GetArenaNoVirtual() == NULL && ctxinfo_ != NULL) {
    delete ctxinfo_;
  }
  ctxinfo_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MerkleTx::kCTxInfoFieldNumber;
const int MerkleTx::kHashBlockFieldNumber;
const int MerkleTx::kVMerkleBranchFieldNumber;
const int MerkleTx::kNIndexFieldNumber;
const int MerkleTx::kBMerkleVerifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MerkleTx::MerkleTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Enze.MerkleTx)
}
MerkleTx::MerkleTx(const MerkleTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vmerklebranch_(from.vmerklebranch_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashblock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hashblock().size() > 0) {
    hashblock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashblock_);
  }
  if (from.has_ctxinfo()) {
    ctxinfo_ = new ::Enze::Transaction(*from.ctxinfo_);
  } else {
    ctxinfo_ = NULL;
  }
  ::memcpy(&nindex_, &from.nindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&bmerkleverified_) -
    reinterpret_cast<char*>(&nindex_)) + sizeof(bmerkleverified_));
  // @@protoc_insertion_point(copy_constructor:Enze.MerkleTx)
}

void MerkleTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MerkleTx_Order_2eproto.base);
  hashblock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctxinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bmerkleverified_) -
      reinterpret_cast<char*>(&ctxinfo_)) + sizeof(bmerkleverified_));
}

MerkleTx::~MerkleTx() {
  // @@protoc_insertion_point(destructor:Enze.MerkleTx)
  SharedDtor();
}

void MerkleTx::SharedDtor() {
  hashblock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ctxinfo_;
}

void MerkleTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MerkleTx& MerkleTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MerkleTx_Order_2eproto.base);
  return *internal_default_instance();
}


void MerkleTx::Clear() {
// @@protoc_insertion_point(message_clear_start:Enze.MerkleTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vmerklebranch_.Clear();
  hashblock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && ctxinfo_ != NULL) {
    delete ctxinfo_;
  }
  ctxinfo_ = NULL;
  ::memset(&nindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bmerkleverified_) -
      reinterpret_cast<char*>(&nindex_)) + sizeof(bmerkleverified_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MerkleTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MerkleTx*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .Enze.Transaction cTxInfo = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Enze::Transaction::_InternalParse;
        object = msg->mutable_ctxinfo();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // string hashBlock = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Enze.MerkleTx.hashBlock");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_hashblock();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated string vMerkleBranch = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("Enze.MerkleTx.vMerkleBranch");
          parser_till_end = ::google::protobuf::internal::StringParserUTF8;
          ::std::string* str = msg->add_vmerklebranch();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // int32 nIndex = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::int32 value = val;
        msg->set_nindex(value);
        break;
      }
      // bool bMerkleVerified = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_bmerkleverified(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MerkleTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Enze.MerkleTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Enze.Transaction cTxInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ctxinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hashBlock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashblock()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashblock().data(), static_cast<int>(this->hashblock().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.MerkleTx.hashBlock"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string vMerkleBranch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vmerklebranch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vmerklebranch(this->vmerklebranch_size() - 1).data(),
            static_cast<int>(this->vmerklebranch(this->vmerklebranch_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.MerkleTx.vMerkleBranch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nIndex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bMerkleVerified = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmerkleverified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Enze.MerkleTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Enze.MerkleTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MerkleTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Enze.MerkleTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Enze.Transaction cTxInfo = 1;
  if (this->has_ctxinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ctxinfo(this), output);
  }

  // string hashBlock = 2;
  if (this->hashblock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashblock().data(), static_cast<int>(this->hashblock().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.MerkleTx.hashBlock");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hashblock(), output);
  }

  // repeated string vMerkleBranch = 3;
  for (int i = 0, n = this->vmerklebranch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmerklebranch(i).data(), static_cast<int>(this->vmerklebranch(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.MerkleTx.vMerkleBranch");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->vmerklebranch(i), output);
  }

  // int32 nIndex = 4;
  if (this->nindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nindex(), output);
  }

  // bool bMerkleVerified = 5;
  if (this->bmerkleverified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bmerkleverified(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Enze.MerkleTx)
}

::google::protobuf::uint8* MerkleTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Enze.MerkleTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Enze.Transaction cTxInfo = 1;
  if (this->has_ctxinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ctxinfo(this), deterministic, target);
  }

  // string hashBlock = 2;
  if (this->hashblock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashblock().data(), static_cast<int>(this->hashblock().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.MerkleTx.hashBlock");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hashblock(), target);
  }

  // repeated string vMerkleBranch = 3;
  for (int i = 0, n = this->vmerklebranch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vmerklebranch(i).data(), static_cast<int>(this->vmerklebranch(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.MerkleTx.vMerkleBranch");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->vmerklebranch(i), target);
  }

  // int32 nIndex = 4;
  if (this->nindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nindex(), target);
  }

  // bool bMerkleVerified = 5;
  if (this->bmerkleverified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bmerkleverified(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Enze.MerkleTx)
  return target;
}

size_t MerkleTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Enze.MerkleTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string vMerkleBranch = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vmerklebranch_size());
  for (int i = 0, n = this->vmerklebranch_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vmerklebranch(i));
  }

  // string hashBlock = 2;
  if (this->hashblock().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashblock());
  }

  // .Enze.Transaction cTxInfo = 1;
  if (this->has_ctxinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ctxinfo_);
  }

  // int32 nIndex = 4;
  if (this->nindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nindex());
  }

  // bool bMerkleVerified = 5;
  if (this->bmerkleverified() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MerkleTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Enze.MerkleTx)
  GOOGLE_DCHECK_NE(&from, this);
  const MerkleTx* source =
      ::google::protobuf::DynamicCastToGenerated<MerkleTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Enze.MerkleTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Enze.MerkleTx)
    MergeFrom(*source);
  }
}

void MerkleTx::MergeFrom(const MerkleTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Enze.MerkleTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vmerklebranch_.MergeFrom(from.vmerklebranch_);
  if (from.hashblock().size() > 0) {

    hashblock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashblock_);
  }
  if (from.has_ctxinfo()) {
    mutable_ctxinfo()->::Enze::Transaction::MergeFrom(from.ctxinfo());
  }
  if (from.nindex() != 0) {
    set_nindex(from.nindex());
  }
  if (from.bmerkleverified() != 0) {
    set_bmerkleverified(from.bmerkleverified());
  }
}

void MerkleTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Enze.MerkleTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerkleTx::CopyFrom(const MerkleTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Enze.MerkleTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerkleTx::IsInitialized() const {
  return true;
}

void MerkleTx::Swap(MerkleTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MerkleTx::InternalSwap(MerkleTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vmerklebranch_.InternalSwap(CastToBase(&other->vmerklebranch_));
  hashblock_.Swap(&other->hashblock_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctxinfo_, other->ctxinfo_);
  swap(nindex_, other->nindex_);
  swap(bmerkleverified_, other->bmerkleverified_);
}

::google::protobuf::Metadata MerkleTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Order_2eproto);
  return ::file_level_metadata_Order_2eproto[kIndexInFileMessages];
}


// ===================================================================

OrderForm_MapOrderEntry_DoNotUse::OrderForm_MapOrderEntry_DoNotUse() {}
OrderForm_MapOrderEntry_DoNotUse::OrderForm_MapOrderEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void OrderForm_MapOrderEntry_DoNotUse::MergeFrom(const OrderForm_MapOrderEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata OrderForm_MapOrderEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Order_2eproto);
  return ::file_level_metadata_Order_2eproto[1];
}
void OrderForm_MapOrderEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderForm_MapOrderEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      OrderForm_MapOrderEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "Enze.OrderForm.MapOrderEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "Enze.OrderForm.MapOrderEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void OrderForm::InitAsDefaultInstance() {
}
class OrderForm::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderForm::kMapOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderForm::OrderForm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Enze.OrderForm)
}
OrderForm::OrderForm(const OrderForm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maporder_.MergeFrom(from.maporder_);
  // @@protoc_insertion_point(copy_constructor:Enze.OrderForm)
}

void OrderForm::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OrderForm_Order_2eproto.base);
}

OrderForm::~OrderForm() {
  // @@protoc_insertion_point(destructor:Enze.OrderForm)
  SharedDtor();
}

void OrderForm::SharedDtor() {
}

void OrderForm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderForm& OrderForm::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OrderForm_Order_2eproto.base);
  return *internal_default_instance();
}


void OrderForm::Clear() {
// @@protoc_insertion_point(message_clear_start:Enze.OrderForm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maporder_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OrderForm::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OrderForm*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, string> mapOrder = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::Enze::OrderForm_MapOrderEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->maporder_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OrderForm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Enze.OrderForm)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> mapOrder = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          OrderForm_MapOrderEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              OrderForm_MapOrderEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&maporder_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.OrderForm.MapOrderEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.OrderForm.MapOrderEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Enze.OrderForm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Enze.OrderForm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OrderForm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Enze.OrderForm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> mapOrder = 1;
  if (!this->maporder().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Enze.OrderForm.MapOrderEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Enze.OrderForm.MapOrderEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->maporder().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->maporder().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->maporder().begin();
          it != this->maporder().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<OrderForm_MapOrderEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(maporder_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<OrderForm_MapOrderEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->maporder().begin();
          it != this->maporder().end(); ++it) {
        entry.reset(maporder_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Enze.OrderForm)
}

::google::protobuf::uint8* OrderForm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Enze.OrderForm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> mapOrder = 1;
  if (!this->maporder().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Enze.OrderForm.MapOrderEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Enze.OrderForm.MapOrderEntry.value");
      }
    };

    if (deterministic &&
        this->maporder().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->maporder().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->maporder().begin();
          it != this->maporder().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<OrderForm_MapOrderEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(maporder_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, deterministic, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<OrderForm_MapOrderEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->maporder().begin();
          it != this->maporder().end(); ++it) {
        entry.reset(maporder_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, deterministic, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Enze.OrderForm)
  return target;
}

size_t OrderForm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Enze.OrderForm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> mapOrder = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->maporder_size());
  {
    ::std::unique_ptr<OrderForm_MapOrderEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->maporder().begin();
        it != this->maporder().end(); ++it) {
      entry.reset(maporder_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderForm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Enze.OrderForm)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderForm* source =
      ::google::protobuf::DynamicCastToGenerated<OrderForm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Enze.OrderForm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Enze.OrderForm)
    MergeFrom(*source);
  }
}

void OrderForm::MergeFrom(const OrderForm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Enze.OrderForm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  maporder_.MergeFrom(from.maporder_);
}

void OrderForm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Enze.OrderForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderForm::CopyFrom(const OrderForm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Enze.OrderForm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderForm::IsInitialized() const {
  return true;
}

void OrderForm::Swap(OrderForm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderForm::InternalSwap(OrderForm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  maporder_.Swap(&other->maporder_);
}

::google::protobuf::Metadata OrderForm::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Order_2eproto);
  return ::file_level_metadata_Order_2eproto[kIndexInFileMessages];
}


// ===================================================================

WalletTx_MapValueEntry_DoNotUse::WalletTx_MapValueEntry_DoNotUse() {}
WalletTx_MapValueEntry_DoNotUse::WalletTx_MapValueEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void WalletTx_MapValueEntry_DoNotUse::MergeFrom(const WalletTx_MapValueEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata WalletTx_MapValueEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Order_2eproto);
  return ::file_level_metadata_Order_2eproto[3];
}
void WalletTx_MapValueEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WalletTx_MapValueEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      WalletTx_MapValueEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "Enze.WalletTx.MapValueEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "Enze.WalletTx.MapValueEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void WalletTx::InitAsDefaultInstance() {
  ::Enze::_WalletTx_default_instance_._instance.get_mutable()->cselfmekleinfo_ = const_cast< ::Enze::MerkleTx*>(
      ::Enze::MerkleTx::internal_default_instance());
}
class WalletTx::HasBitSetters {
 public:
  static const ::Enze::MerkleTx& cselfmekleinfo(const WalletTx* msg);
};

const ::Enze::MerkleTx&
WalletTx::HasBitSetters::cselfmekleinfo(const WalletTx* msg) {
  return *msg->cselfmekleinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WalletTx::kCSelfMekleInfoFieldNumber;
const int WalletTx::kVPrevTxFieldNumber;
const int WalletTx::kMapValueFieldNumber;
const int WalletTx::kOrderListFieldNumber;
const int WalletTx::kBTimeReceivedIsTxTimeFieldNumber;
const int WalletTx::kUTimeReceivedFieldNumber;
const int WalletTx::kMBFromMeFieldNumber;
const int WalletTx::kMBSpentFieldNumber;
const int WalletTx::kUTimeDisplayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WalletTx::WalletTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Enze.WalletTx)
}
WalletTx::WalletTx(const WalletTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vprevtx_(from.vprevtx_),
      orderlist_(from.orderlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapvalue_.MergeFrom(from.mapvalue_);
  if (from.has_cselfmekleinfo()) {
    cselfmekleinfo_ = new ::Enze::MerkleTx(*from.cselfmekleinfo_);
  } else {
    cselfmekleinfo_ = NULL;
  }
  ::memcpy(&utimereceived_, &from.utimereceived_,
    static_cast<size_t>(reinterpret_cast<char*>(&utimedisplayed_) -
    reinterpret_cast<char*>(&utimereceived_)) + sizeof(utimedisplayed_));
  // @@protoc_insertion_point(copy_constructor:Enze.WalletTx)
}

void WalletTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WalletTx_Order_2eproto.base);
  ::memset(&cselfmekleinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utimedisplayed_) -
      reinterpret_cast<char*>(&cselfmekleinfo_)) + sizeof(utimedisplayed_));
}

WalletTx::~WalletTx() {
  // @@protoc_insertion_point(destructor:Enze.WalletTx)
  SharedDtor();
}

void WalletTx::SharedDtor() {
  if (this != internal_default_instance()) delete cselfmekleinfo_;
}

void WalletTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletTx& WalletTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WalletTx_Order_2eproto.base);
  return *internal_default_instance();
}


void WalletTx::Clear() {
// @@protoc_insertion_point(message_clear_start:Enze.WalletTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vprevtx_.Clear();
  mapvalue_.Clear();
  orderlist_.Clear();
  if (GetArenaNoVirtual() == NULL && cselfmekleinfo_ != NULL) {
    delete cselfmekleinfo_;
  }
  cselfmekleinfo_ = NULL;
  ::memset(&utimereceived_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utimedisplayed_) -
      reinterpret_cast<char*>(&utimereceived_)) + sizeof(utimedisplayed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WalletTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WalletTx*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .Enze.MerkleTx cSelfMekleInfo = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Enze::MerkleTx::_InternalParse;
        object = msg->mutable_cselfmekleinfo();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // repeated .Enze.MerkleTx vPrevTx = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Enze::MerkleTx::_InternalParse;
          object = msg->add_vprevtx();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // map<string, string> mapValue = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::Enze::WalletTx_MapValueEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->mapvalue_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .Enze.OrderForm OrderList = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Enze::OrderForm::_InternalParse;
          object = msg->add_orderlist();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // bool bTimeReceivedIsTxTime = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_btimereceivedistxtime(value);
        break;
      }
      // uint32 uTimeReceived = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_utimereceived(value);
        break;
      }
      // bool m_bFromMe = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_m_bfromme(value);
        break;
      }
      // bool m_bSpent = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_m_bspent(value);
        break;
      }
      // uint32 uTimeDisplayed = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_utimedisplayed(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WalletTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Enze.WalletTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Enze.MerkleTx cSelfMekleInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cselfmekleinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Enze.MerkleTx vPrevTx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vprevtx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> mapValue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          WalletTx_MapValueEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              WalletTx_MapValueEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&mapvalue_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.WalletTx.MapValueEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.WalletTx.MapValueEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Enze.OrderForm OrderList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_orderlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bTimeReceivedIsTxTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &btimereceivedistxtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uTimeReceived = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utimereceived_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool m_bFromMe = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bfromme_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool m_bSpent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bspent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uTimeDisplayed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utimedisplayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Enze.WalletTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Enze.WalletTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WalletTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Enze.WalletTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Enze.MerkleTx cSelfMekleInfo = 1;
  if (this->has_cselfmekleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cselfmekleinfo(this), output);
  }

  // repeated .Enze.MerkleTx vPrevTx = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vprevtx_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->vprevtx(static_cast<int>(i)),
      output);
  }

  // map<string, string> mapValue = 3;
  if (!this->mapvalue().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Enze.WalletTx.MapValueEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Enze.WalletTx.MapValueEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->mapvalue().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->mapvalue().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->mapvalue().begin();
          it != this->mapvalue().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WalletTx_MapValueEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(mapvalue_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WalletTx_MapValueEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->mapvalue().begin();
          it != this->mapvalue().end(); ++it) {
        entry.reset(mapvalue_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .Enze.OrderForm OrderList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orderlist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->orderlist(static_cast<int>(i)),
      output);
  }

  // bool bTimeReceivedIsTxTime = 5;
  if (this->btimereceivedistxtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->btimereceivedistxtime(), output);
  }

  // uint32 uTimeReceived = 6;
  if (this->utimereceived() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->utimereceived(), output);
  }

  // bool m_bFromMe = 7;
  if (this->m_bfromme() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->m_bfromme(), output);
  }

  // bool m_bSpent = 8;
  if (this->m_bspent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->m_bspent(), output);
  }

  // uint32 uTimeDisplayed = 9;
  if (this->utimedisplayed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->utimedisplayed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Enze.WalletTx)
}

::google::protobuf::uint8* WalletTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Enze.WalletTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Enze.MerkleTx cSelfMekleInfo = 1;
  if (this->has_cselfmekleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cselfmekleinfo(this), deterministic, target);
  }

  // repeated .Enze.MerkleTx vPrevTx = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vprevtx_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->vprevtx(static_cast<int>(i)), deterministic, target);
  }

  // map<string, string> mapValue = 3;
  if (!this->mapvalue().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Enze.WalletTx.MapValueEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Enze.WalletTx.MapValueEntry.value");
      }
    };

    if (deterministic &&
        this->mapvalue().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->mapvalue().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->mapvalue().begin();
          it != this->mapvalue().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WalletTx_MapValueEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(mapvalue_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, deterministic, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WalletTx_MapValueEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->mapvalue().begin();
          it != this->mapvalue().end(); ++it) {
        entry.reset(mapvalue_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, deterministic, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .Enze.OrderForm OrderList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orderlist_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->orderlist(static_cast<int>(i)), deterministic, target);
  }

  // bool bTimeReceivedIsTxTime = 5;
  if (this->btimereceivedistxtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->btimereceivedistxtime(), target);
  }

  // uint32 uTimeReceived = 6;
  if (this->utimereceived() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->utimereceived(), target);
  }

  // bool m_bFromMe = 7;
  if (this->m_bfromme() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->m_bfromme(), target);
  }

  // bool m_bSpent = 8;
  if (this->m_bspent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->m_bspent(), target);
  }

  // uint32 uTimeDisplayed = 9;
  if (this->utimedisplayed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->utimedisplayed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Enze.WalletTx)
  return target;
}

size_t WalletTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Enze.WalletTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Enze.MerkleTx vPrevTx = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vprevtx_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vprevtx(static_cast<int>(i)));
    }
  }

  // map<string, string> mapValue = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mapvalue_size());
  {
    ::std::unique_ptr<WalletTx_MapValueEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->mapvalue().begin();
        it != this->mapvalue().end(); ++it) {
      entry.reset(mapvalue_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .Enze.OrderForm OrderList = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->orderlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->orderlist(static_cast<int>(i)));
    }
  }

  // .Enze.MerkleTx cSelfMekleInfo = 1;
  if (this->has_cselfmekleinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cselfmekleinfo_);
  }

  // uint32 uTimeReceived = 6;
  if (this->utimereceived() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->utimereceived());
  }

  // bool bTimeReceivedIsTxTime = 5;
  if (this->btimereceivedistxtime() != 0) {
    total_size += 1 + 1;
  }

  // bool m_bFromMe = 7;
  if (this->m_bfromme() != 0) {
    total_size += 1 + 1;
  }

  // bool m_bSpent = 8;
  if (this->m_bspent() != 0) {
    total_size += 1 + 1;
  }

  // uint32 uTimeDisplayed = 9;
  if (this->utimedisplayed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->utimedisplayed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Enze.WalletTx)
  GOOGLE_DCHECK_NE(&from, this);
  const WalletTx* source =
      ::google::protobuf::DynamicCastToGenerated<WalletTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Enze.WalletTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Enze.WalletTx)
    MergeFrom(*source);
  }
}

void WalletTx::MergeFrom(const WalletTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Enze.WalletTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vprevtx_.MergeFrom(from.vprevtx_);
  mapvalue_.MergeFrom(from.mapvalue_);
  orderlist_.MergeFrom(from.orderlist_);
  if (from.has_cselfmekleinfo()) {
    mutable_cselfmekleinfo()->::Enze::MerkleTx::MergeFrom(from.cselfmekleinfo());
  }
  if (from.utimereceived() != 0) {
    set_utimereceived(from.utimereceived());
  }
  if (from.btimereceivedistxtime() != 0) {
    set_btimereceivedistxtime(from.btimereceivedistxtime());
  }
  if (from.m_bfromme() != 0) {
    set_m_bfromme(from.m_bfromme());
  }
  if (from.m_bspent() != 0) {
    set_m_bspent(from.m_bspent());
  }
  if (from.utimedisplayed() != 0) {
    set_utimedisplayed(from.utimedisplayed());
  }
}

void WalletTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Enze.WalletTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WalletTx::CopyFrom(const WalletTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Enze.WalletTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletTx::IsInitialized() const {
  return true;
}

void WalletTx::Swap(WalletTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WalletTx::InternalSwap(WalletTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&vprevtx_)->InternalSwap(CastToBase(&other->vprevtx_));
  mapvalue_.Swap(&other->mapvalue_);
  CastToBase(&orderlist_)->InternalSwap(CastToBase(&other->orderlist_));
  swap(cselfmekleinfo_, other->cselfmekleinfo_);
  swap(utimereceived_, other->utimereceived_);
  swap(btimereceivedistxtime_, other->btimereceivedistxtime_);
  swap(m_bfromme_, other->m_bfromme_);
  swap(m_bspent_, other->m_bspent_);
  swap(utimedisplayed_, other->utimedisplayed_);
}

::google::protobuf::Metadata WalletTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Order_2eproto);
  return ::file_level_metadata_Order_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Order::InitAsDefaultInstance() {
  ::Enze::_Order_default_instance_._instance.get_mutable()->txorder_ = const_cast< ::Enze::WalletTx*>(
      ::Enze::WalletTx::internal_default_instance());
}
class Order::HasBitSetters {
 public:
  static const ::Enze::WalletTx& txorder(const Order* msg);
};

const ::Enze::WalletTx&
Order::HasBitSetters::txorder(const Order* msg) {
  return *msg->txorder_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Order::kHashReplyFieldNumber;
const int Order::kTxOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Order::Order()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Enze.Order)
}
Order::Order(const Order& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hashreply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hashreply().size() > 0) {
    hashreply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashreply_);
  }
  if (from.has_txorder()) {
    txorder_ = new ::Enze::WalletTx(*from.txorder_);
  } else {
    txorder_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Enze.Order)
}

void Order::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Order_Order_2eproto.base);
  hashreply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txorder_ = NULL;
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:Enze.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  hashreply_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete txorder_;
}

void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Order_Order_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:Enze.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hashreply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && txorder_ != NULL) {
    delete txorder_;
  }
  txorder_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Order::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Order*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string hashReply = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Enze.Order.hashReply");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_hashreply();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // .Enze.WalletTx txOrder = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Enze::WalletTx::_InternalParse;
        object = msg->mutable_txorder();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Order::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Enze.Order)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hashReply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashreply()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashreply().data(), static_cast<int>(this->hashreply().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.Order.hashReply"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Enze.WalletTx txOrder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_txorder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Enze.Order)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Enze.Order)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Order::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Enze.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hashReply = 1;
  if (this->hashreply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashreply().data(), static_cast<int>(this->hashreply().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.Order.hashReply");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hashreply(), output);
  }

  // .Enze.WalletTx txOrder = 2;
  if (this->has_txorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::txorder(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Enze.Order)
}

::google::protobuf::uint8* Order::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Enze.Order)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hashReply = 1;
  if (this->hashreply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashreply().data(), static_cast<int>(this->hashreply().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.Order.hashReply");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hashreply(), target);
  }

  // .Enze.WalletTx txOrder = 2;
  if (this->has_txorder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::txorder(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Enze.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Enze.Order)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hashReply = 1;
  if (this->hashreply().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashreply());
  }

  // .Enze.WalletTx txOrder = 2;
  if (this->has_txorder()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *txorder_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Enze.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::google::protobuf::DynamicCastToGenerated<Order>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Enze.Order)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Enze.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Enze.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hashreply().size() > 0) {

    hashreply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashreply_);
  }
  if (from.has_txorder()) {
    mutable_txorder()->::Enze::WalletTx::MergeFrom(from.txorder());
  }
}

void Order::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Enze.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Enze.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::Swap(Order* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hashreply_.Swap(&other->hashreply_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(txorder_, other->txorder_);
}

::google::protobuf::Metadata Order::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Order_2eproto);
  return ::file_level_metadata_Order_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Enze
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Enze::MerkleTx* Arena::CreateMaybeMessage< ::Enze::MerkleTx >(Arena* arena) {
  return Arena::CreateInternal< ::Enze::MerkleTx >(arena);
}
template<> PROTOBUF_NOINLINE ::Enze::OrderForm_MapOrderEntry_DoNotUse* Arena::CreateMaybeMessage< ::Enze::OrderForm_MapOrderEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Enze::OrderForm_MapOrderEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Enze::OrderForm* Arena::CreateMaybeMessage< ::Enze::OrderForm >(Arena* arena) {
  return Arena::CreateInternal< ::Enze::OrderForm >(arena);
}
template<> PROTOBUF_NOINLINE ::Enze::WalletTx_MapValueEntry_DoNotUse* Arena::CreateMaybeMessage< ::Enze::WalletTx_MapValueEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Enze::WalletTx_MapValueEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Enze::WalletTx* Arena::CreateMaybeMessage< ::Enze::WalletTx >(Arena* arena) {
  return Arena::CreateInternal< ::Enze::WalletTx >(arena);
}
template<> PROTOBUF_NOINLINE ::Enze::Order* Arena::CreateMaybeMessage< ::Enze::Order >(Arena* arena) {
  return Arena::CreateInternal< ::Enze::Order >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
