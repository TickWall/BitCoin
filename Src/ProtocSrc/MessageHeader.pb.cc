// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageHeader.proto

#include "MessageHeader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace Enze {
class MessageHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageHeader> _instance;
} _MessageHeader_default_instance_;
}  // namespace Enze
static void InitDefaultsMessageHeader_MessageHeader_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Enze::_MessageHeader_default_instance_;
    new (ptr) ::Enze::MessageHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Enze::MessageHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MessageHeader_MessageHeader_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessageHeader_MessageHeader_2eproto}, {}};

void InitDefaults_MessageHeader_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MessageHeader_MessageHeader_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_MessageHeader_2eproto[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_MessageHeader_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_MessageHeader_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_MessageHeader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Enze::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Enze::MessageHeader, pchmessagestart_),
  PROTOBUF_FIELD_OFFSET(::Enze::MessageHeader, emsgkind_),
  PROTOBUF_FIELD_OFFSET(::Enze::MessageHeader, messagesize_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Enze::MessageHeader)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Enze::_MessageHeader_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_MessageHeader_2eproto = {
  {}, AddDescriptors_MessageHeader_2eproto, "MessageHeader.proto", schemas,
  file_default_instances, TableStruct_MessageHeader_2eproto::offsets,
  file_level_metadata_MessageHeader_2eproto, 1, file_level_enum_descriptors_MessageHeader_2eproto, file_level_service_descriptors_MessageHeader_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_MessageHeader_2eproto = {
  false, InitDefaults_MessageHeader_2eproto, 
  "\n\023MessageHeader.proto\022\004Enze\"\264\002\n\rMessageH"
  "eader\022\027\n\017pchMessageStart\030\001 \001(\t\022/\n\010eMsgKi"
  "nd\030\002 \001(\0162\035.Enze.MessageHeader.Mesg_Kind\022"
  "\023\n\013MessageSize\030\003 \001(\r\"\303\001\n\tMesg_Kind\022\016\n\nMK"
  "_Version\020\000\022\013\n\007MK_Addr\020\001\022\n\n\006MK_Inv\020\002\022\016\n\nM"
  "K_GetData\020\003\022\020\n\014MK_GetBlocks\020\004\022\t\n\005MK_Tx\020\005"
  "\022\r\n\tMK_Review\020\006\022\014\n\010MK_Block\020\007\022\016\n\nMK_GetA"
  "ddr\020\010\022\021\n\rMK_CheckOrder\020\t\022\022\n\016MK_SubmitOrd"
  "er\020\n\022\014\n\010MK_Reply\020\013b\006proto3"
,
  "MessageHeader.proto", &assign_descriptors_table_MessageHeader_2eproto, 346,
};

void AddDescriptors_MessageHeader_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_MessageHeader_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MessageHeader_2eproto = []() { AddDescriptors_MessageHeader_2eproto(); return true; }();
namespace Enze {
const ::google::protobuf::EnumDescriptor* MessageHeader_Mesg_Kind_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_MessageHeader_2eproto);
  return file_level_enum_descriptors_MessageHeader_2eproto[0];
}
bool MessageHeader_Mesg_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MessageHeader_Mesg_Kind MessageHeader::MK_Version;
const MessageHeader_Mesg_Kind MessageHeader::MK_Addr;
const MessageHeader_Mesg_Kind MessageHeader::MK_Inv;
const MessageHeader_Mesg_Kind MessageHeader::MK_GetData;
const MessageHeader_Mesg_Kind MessageHeader::MK_GetBlocks;
const MessageHeader_Mesg_Kind MessageHeader::MK_Tx;
const MessageHeader_Mesg_Kind MessageHeader::MK_Review;
const MessageHeader_Mesg_Kind MessageHeader::MK_Block;
const MessageHeader_Mesg_Kind MessageHeader::MK_GetAddr;
const MessageHeader_Mesg_Kind MessageHeader::MK_CheckOrder;
const MessageHeader_Mesg_Kind MessageHeader::MK_SubmitOrder;
const MessageHeader_Mesg_Kind MessageHeader::MK_Reply;
const MessageHeader_Mesg_Kind MessageHeader::Mesg_Kind_MIN;
const MessageHeader_Mesg_Kind MessageHeader::Mesg_Kind_MAX;
const int MessageHeader::Mesg_Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MessageHeader::InitAsDefaultInstance() {
}
class MessageHeader::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageHeader::kPchMessageStartFieldNumber;
const int MessageHeader::kEMsgKindFieldNumber;
const int MessageHeader::kMessageSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageHeader::MessageHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Enze.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pchmessagestart_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pchmessagestart().size() > 0) {
    pchmessagestart_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pchmessagestart_);
  }
  ::memcpy(&emsgkind_, &from.emsgkind_,
    static_cast<size_t>(reinterpret_cast<char*>(&messagesize_) -
    reinterpret_cast<char*>(&emsgkind_)) + sizeof(messagesize_));
  // @@protoc_insertion_point(copy_constructor:Enze.MessageHeader)
}

void MessageHeader::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MessageHeader_MessageHeader_2eproto.base);
  pchmessagestart_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&emsgkind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messagesize_) -
      reinterpret_cast<char*>(&emsgkind_)) + sizeof(messagesize_));
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:Enze.MessageHeader)
  SharedDtor();
}

void MessageHeader::SharedDtor() {
  pchmessagestart_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageHeader& MessageHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MessageHeader_MessageHeader_2eproto.base);
  return *internal_default_instance();
}


void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:Enze.MessageHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pchmessagestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&emsgkind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&messagesize_) -
      reinterpret_cast<char*>(&emsgkind_)) + sizeof(messagesize_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageHeader::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MessageHeader*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string pchMessageStart = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Enze.MessageHeader.pchMessageStart");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8;
        ::std::string* str = msg->mutable_pchmessagestart();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // .Enze.MessageHeader.Mesg_Kind eMsgKind = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::Enze::MessageHeader_Mesg_Kind value = static_cast<::Enze::MessageHeader_Mesg_Kind>(val);
        msg->set_emsgkind(value);
        break;
      }
      // uint32 MessageSize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_messagesize(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Enze.MessageHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pchMessageStart = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pchmessagestart()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pchmessagestart().data(), static_cast<int>(this->pchmessagestart().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Enze.MessageHeader.pchMessageStart"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Enze.MessageHeader.Mesg_Kind eMsgKind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emsgkind(static_cast< ::Enze::MessageHeader_Mesg_Kind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MessageSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &messagesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Enze.MessageHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Enze.MessageHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Enze.MessageHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pchMessageStart = 1;
  if (this->pchmessagestart().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pchmessagestart().data(), static_cast<int>(this->pchmessagestart().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.MessageHeader.pchMessageStart");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pchmessagestart(), output);
  }

  // .Enze.MessageHeader.Mesg_Kind eMsgKind = 2;
  if (this->emsgkind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->emsgkind(), output);
  }

  // uint32 MessageSize = 3;
  if (this->messagesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->messagesize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Enze.MessageHeader)
}

::google::protobuf::uint8* MessageHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Enze.MessageHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pchMessageStart = 1;
  if (this->pchmessagestart().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pchmessagestart().data(), static_cast<int>(this->pchmessagestart().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Enze.MessageHeader.pchMessageStart");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pchmessagestart(), target);
  }

  // .Enze.MessageHeader.Mesg_Kind eMsgKind = 2;
  if (this->emsgkind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->emsgkind(), target);
  }

  // uint32 MessageSize = 3;
  if (this->messagesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->messagesize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Enze.MessageHeader)
  return target;
}

size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Enze.MessageHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pchMessageStart = 1;
  if (this->pchmessagestart().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pchmessagestart());
  }

  // .Enze.MessageHeader.Mesg_Kind eMsgKind = 2;
  if (this->emsgkind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emsgkind());
  }

  // uint32 MessageSize = 3;
  if (this->messagesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->messagesize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Enze.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageHeader* source =
      ::google::protobuf::DynamicCastToGenerated<MessageHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Enze.MessageHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Enze.MessageHeader)
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Enze.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pchmessagestart().size() > 0) {

    pchmessagestart_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pchmessagestart_);
  }
  if (from.emsgkind() != 0) {
    set_emsgkind(from.emsgkind());
  }
  if (from.messagesize() != 0) {
    set_messagesize(from.messagesize());
  }
}

void MessageHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Enze.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Enze.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  return true;
}

void MessageHeader::Swap(MessageHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pchmessagestart_.Swap(&other->pchmessagestart_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(emsgkind_, other->emsgkind_);
  swap(messagesize_, other->messagesize_);
}

::google::protobuf::Metadata MessageHeader::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MessageHeader_2eproto);
  return ::file_level_metadata_MessageHeader_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Enze
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Enze::MessageHeader* Arena::CreateMaybeMessage< ::Enze::MessageHeader >(Arena* arena) {
  return Arena::CreateInternal< ::Enze::MessageHeader >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
