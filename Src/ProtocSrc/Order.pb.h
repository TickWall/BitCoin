// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Order.proto

#ifndef PROTOBUF_INCLUDED_Order_2eproto
#define PROTOBUF_INCLUDED_Order_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "Transaction.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Order_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Order_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Order_2eproto();
namespace Enze {
class MerkleTx;
class MerkleTxDefaultTypeInternal;
extern MerkleTxDefaultTypeInternal _MerkleTx_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderForm;
class OrderFormDefaultTypeInternal;
extern OrderFormDefaultTypeInternal _OrderForm_default_instance_;
class OrderForm_MapOrderEntry_DoNotUse;
class OrderForm_MapOrderEntry_DoNotUseDefaultTypeInternal;
extern OrderForm_MapOrderEntry_DoNotUseDefaultTypeInternal _OrderForm_MapOrderEntry_DoNotUse_default_instance_;
class WalletTx;
class WalletTxDefaultTypeInternal;
extern WalletTxDefaultTypeInternal _WalletTx_default_instance_;
class WalletTx_MapValueEntry_DoNotUse;
class WalletTx_MapValueEntry_DoNotUseDefaultTypeInternal;
extern WalletTx_MapValueEntry_DoNotUseDefaultTypeInternal _WalletTx_MapValueEntry_DoNotUse_default_instance_;
}  // namespace Enze
namespace google {
namespace protobuf {
template<> ::Enze::MerkleTx* Arena::CreateMaybeMessage<::Enze::MerkleTx>(Arena*);
template<> ::Enze::Order* Arena::CreateMaybeMessage<::Enze::Order>(Arena*);
template<> ::Enze::OrderForm* Arena::CreateMaybeMessage<::Enze::OrderForm>(Arena*);
template<> ::Enze::OrderForm_MapOrderEntry_DoNotUse* Arena::CreateMaybeMessage<::Enze::OrderForm_MapOrderEntry_DoNotUse>(Arena*);
template<> ::Enze::WalletTx* Arena::CreateMaybeMessage<::Enze::WalletTx>(Arena*);
template<> ::Enze::WalletTx_MapValueEntry_DoNotUse* Arena::CreateMaybeMessage<::Enze::WalletTx_MapValueEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Enze {

// ===================================================================

class MerkleTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.MerkleTx) */ {
 public:
  MerkleTx();
  virtual ~MerkleTx();

  MerkleTx(const MerkleTx& from);

  inline MerkleTx& operator=(const MerkleTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MerkleTx(MerkleTx&& from) noexcept
    : MerkleTx() {
    *this = ::std::move(from);
  }

  inline MerkleTx& operator=(MerkleTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MerkleTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MerkleTx* internal_default_instance() {
    return reinterpret_cast<const MerkleTx*>(
               &_MerkleTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MerkleTx* other);
  friend void swap(MerkleTx& a, MerkleTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MerkleTx* New() const final {
    return CreateMaybeMessage<MerkleTx>(NULL);
  }

  MerkleTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MerkleTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MerkleTx& from);
  void MergeFrom(const MerkleTx& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MerkleTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string vMerkleBranch = 3;
  int vmerklebranch_size() const;
  void clear_vmerklebranch();
  static const int kVMerkleBranchFieldNumber = 3;
  const ::std::string& vmerklebranch(int index) const;
  ::std::string* mutable_vmerklebranch(int index);
  void set_vmerklebranch(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vmerklebranch(int index, ::std::string&& value);
  #endif
  void set_vmerklebranch(int index, const char* value);
  void set_vmerklebranch(int index, const char* value, size_t size);
  ::std::string* add_vmerklebranch();
  void add_vmerklebranch(const ::std::string& value);
  #if LANG_CXX11
  void add_vmerklebranch(::std::string&& value);
  #endif
  void add_vmerklebranch(const char* value);
  void add_vmerklebranch(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& vmerklebranch() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_vmerklebranch();

  // string hashBlock = 2;
  void clear_hashblock();
  static const int kHashBlockFieldNumber = 2;
  const ::std::string& hashblock() const;
  void set_hashblock(const ::std::string& value);
  #if LANG_CXX11
  void set_hashblock(::std::string&& value);
  #endif
  void set_hashblock(const char* value);
  void set_hashblock(const char* value, size_t size);
  ::std::string* mutable_hashblock();
  ::std::string* release_hashblock();
  void set_allocated_hashblock(::std::string* hashblock);

  // .Enze.Transaction cTxInfo = 1;
  bool has_ctxinfo() const;
  void clear_ctxinfo();
  static const int kCTxInfoFieldNumber = 1;
  const ::Enze::Transaction& ctxinfo() const;
  ::Enze::Transaction* release_ctxinfo();
  ::Enze::Transaction* mutable_ctxinfo();
  void set_allocated_ctxinfo(::Enze::Transaction* ctxinfo);

  // int32 nIndex = 4;
  void clear_nindex();
  static const int kNIndexFieldNumber = 4;
  ::google::protobuf::int32 nindex() const;
  void set_nindex(::google::protobuf::int32 value);

  // bool bMerkleVerified = 5;
  void clear_bmerkleverified();
  static const int kBMerkleVerifiedFieldNumber = 5;
  bool bmerkleverified() const;
  void set_bmerkleverified(bool value);

  // @@protoc_insertion_point(class_scope:Enze.MerkleTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> vmerklebranch_;
  ::google::protobuf::internal::ArenaStringPtr hashblock_;
  ::Enze::Transaction* ctxinfo_;
  ::google::protobuf::int32 nindex_;
  bool bmerkleverified_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Order_2eproto;
};
// -------------------------------------------------------------------

class OrderForm_MapOrderEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<OrderForm_MapOrderEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<OrderForm_MapOrderEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  OrderForm_MapOrderEntry_DoNotUse();
  OrderForm_MapOrderEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const OrderForm_MapOrderEntry_DoNotUse& other);
  static const OrderForm_MapOrderEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OrderForm_MapOrderEntry_DoNotUse*>(&_OrderForm_MapOrderEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class OrderForm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.OrderForm) */ {
 public:
  OrderForm();
  virtual ~OrderForm();

  OrderForm(const OrderForm& from);

  inline OrderForm& operator=(const OrderForm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderForm(OrderForm&& from) noexcept
    : OrderForm() {
    *this = ::std::move(from);
  }

  inline OrderForm& operator=(OrderForm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OrderForm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderForm* internal_default_instance() {
    return reinterpret_cast<const OrderForm*>(
               &_OrderForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OrderForm* other);
  friend void swap(OrderForm& a, OrderForm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderForm* New() const final {
    return CreateMaybeMessage<OrderForm>(NULL);
  }

  OrderForm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrderForm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrderForm& from);
  void MergeFrom(const OrderForm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderForm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> mapOrder = 1;
  int maporder_size() const;
  void clear_maporder();
  static const int kMapOrderFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      maporder() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_maporder();

  // @@protoc_insertion_point(class_scope:Enze.OrderForm)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      OrderForm_MapOrderEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > maporder_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Order_2eproto;
};
// -------------------------------------------------------------------

class WalletTx_MapValueEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<WalletTx_MapValueEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<WalletTx_MapValueEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  WalletTx_MapValueEntry_DoNotUse();
  WalletTx_MapValueEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const WalletTx_MapValueEntry_DoNotUse& other);
  static const WalletTx_MapValueEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WalletTx_MapValueEntry_DoNotUse*>(&_WalletTx_MapValueEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class WalletTx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.WalletTx) */ {
 public:
  WalletTx();
  virtual ~WalletTx();

  WalletTx(const WalletTx& from);

  inline WalletTx& operator=(const WalletTx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WalletTx(WalletTx&& from) noexcept
    : WalletTx() {
    *this = ::std::move(from);
  }

  inline WalletTx& operator=(WalletTx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WalletTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletTx* internal_default_instance() {
    return reinterpret_cast<const WalletTx*>(
               &_WalletTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(WalletTx* other);
  friend void swap(WalletTx& a, WalletTx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WalletTx* New() const final {
    return CreateMaybeMessage<WalletTx>(NULL);
  }

  WalletTx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WalletTx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WalletTx& from);
  void MergeFrom(const WalletTx& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletTx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .Enze.MerkleTx vPrevTx = 2;
  int vprevtx_size() const;
  void clear_vprevtx();
  static const int kVPrevTxFieldNumber = 2;
  ::Enze::MerkleTx* mutable_vprevtx(int index);
  ::google::protobuf::RepeatedPtrField< ::Enze::MerkleTx >*
      mutable_vprevtx();
  const ::Enze::MerkleTx& vprevtx(int index) const;
  ::Enze::MerkleTx* add_vprevtx();
  const ::google::protobuf::RepeatedPtrField< ::Enze::MerkleTx >&
      vprevtx() const;

  // map<string, string> mapValue = 3;
  int mapvalue_size() const;
  void clear_mapvalue();
  static const int kMapValueFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      mapvalue() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_mapvalue();

  // repeated .Enze.OrderForm OrderList = 4;
  int orderlist_size() const;
  void clear_orderlist();
  static const int kOrderListFieldNumber = 4;
  ::Enze::OrderForm* mutable_orderlist(int index);
  ::google::protobuf::RepeatedPtrField< ::Enze::OrderForm >*
      mutable_orderlist();
  const ::Enze::OrderForm& orderlist(int index) const;
  ::Enze::OrderForm* add_orderlist();
  const ::google::protobuf::RepeatedPtrField< ::Enze::OrderForm >&
      orderlist() const;

  // .Enze.MerkleTx cSelfMekleInfo = 1;
  bool has_cselfmekleinfo() const;
  void clear_cselfmekleinfo();
  static const int kCSelfMekleInfoFieldNumber = 1;
  const ::Enze::MerkleTx& cselfmekleinfo() const;
  ::Enze::MerkleTx* release_cselfmekleinfo();
  ::Enze::MerkleTx* mutable_cselfmekleinfo();
  void set_allocated_cselfmekleinfo(::Enze::MerkleTx* cselfmekleinfo);

  // uint32 uTimeReceived = 6;
  void clear_utimereceived();
  static const int kUTimeReceivedFieldNumber = 6;
  ::google::protobuf::uint32 utimereceived() const;
  void set_utimereceived(::google::protobuf::uint32 value);

  // bool bTimeReceivedIsTxTime = 5;
  void clear_btimereceivedistxtime();
  static const int kBTimeReceivedIsTxTimeFieldNumber = 5;
  bool btimereceivedistxtime() const;
  void set_btimereceivedistxtime(bool value);

  // bool m_bFromMe = 7;
  void clear_m_bfromme();
  static const int kMBFromMeFieldNumber = 7;
  bool m_bfromme() const;
  void set_m_bfromme(bool value);

  // bool m_bSpent = 8;
  void clear_m_bspent();
  static const int kMBSpentFieldNumber = 8;
  bool m_bspent() const;
  void set_m_bspent(bool value);

  // uint32 uTimeDisplayed = 9;
  void clear_utimedisplayed();
  static const int kUTimeDisplayedFieldNumber = 9;
  ::google::protobuf::uint32 utimedisplayed() const;
  void set_utimedisplayed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Enze.WalletTx)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Enze::MerkleTx > vprevtx_;
  ::google::protobuf::internal::MapField<
      WalletTx_MapValueEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > mapvalue_;
  ::google::protobuf::RepeatedPtrField< ::Enze::OrderForm > orderlist_;
  ::Enze::MerkleTx* cselfmekleinfo_;
  ::google::protobuf::uint32 utimereceived_;
  bool btimereceivedistxtime_;
  bool m_bfromme_;
  bool m_bspent_;
  ::google::protobuf::uint32 utimedisplayed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Order_2eproto;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Enze.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Order* other);
  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(NULL);
  }

  Order* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hashReply = 1;
  void clear_hashreply();
  static const int kHashReplyFieldNumber = 1;
  const ::std::string& hashreply() const;
  void set_hashreply(const ::std::string& value);
  #if LANG_CXX11
  void set_hashreply(::std::string&& value);
  #endif
  void set_hashreply(const char* value);
  void set_hashreply(const char* value, size_t size);
  ::std::string* mutable_hashreply();
  ::std::string* release_hashreply();
  void set_allocated_hashreply(::std::string* hashreply);

  // .Enze.WalletTx txOrder = 2;
  bool has_txorder() const;
  void clear_txorder();
  static const int kTxOrderFieldNumber = 2;
  const ::Enze::WalletTx& txorder() const;
  ::Enze::WalletTx* release_txorder();
  ::Enze::WalletTx* mutable_txorder();
  void set_allocated_txorder(::Enze::WalletTx* txorder);

  // @@protoc_insertion_point(class_scope:Enze.Order)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hashreply_;
  ::Enze::WalletTx* txorder_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Order_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MerkleTx

// .Enze.Transaction cTxInfo = 1;
inline bool MerkleTx::has_ctxinfo() const {
  return this != internal_default_instance() && ctxinfo_ != NULL;
}
inline const ::Enze::Transaction& MerkleTx::ctxinfo() const {
  const ::Enze::Transaction* p = ctxinfo_;
  // @@protoc_insertion_point(field_get:Enze.MerkleTx.cTxInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::Transaction*>(
      &::Enze::_Transaction_default_instance_);
}
inline ::Enze::Transaction* MerkleTx::release_ctxinfo() {
  // @@protoc_insertion_point(field_release:Enze.MerkleTx.cTxInfo)
  
  ::Enze::Transaction* temp = ctxinfo_;
  ctxinfo_ = NULL;
  return temp;
}
inline ::Enze::Transaction* MerkleTx::mutable_ctxinfo() {
  
  if (ctxinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::Transaction>(GetArenaNoVirtual());
    ctxinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.MerkleTx.cTxInfo)
  return ctxinfo_;
}
inline void MerkleTx::set_allocated_ctxinfo(::Enze::Transaction* ctxinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ctxinfo_);
  }
  if (ctxinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ctxinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ctxinfo, submessage_arena);
    }
    
  } else {
    
  }
  ctxinfo_ = ctxinfo;
  // @@protoc_insertion_point(field_set_allocated:Enze.MerkleTx.cTxInfo)
}

// string hashBlock = 2;
inline void MerkleTx::clear_hashblock() {
  hashblock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MerkleTx::hashblock() const {
  // @@protoc_insertion_point(field_get:Enze.MerkleTx.hashBlock)
  return hashblock_.GetNoArena();
}
inline void MerkleTx::set_hashblock(const ::std::string& value) {
  
  hashblock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.MerkleTx.hashBlock)
}
#if LANG_CXX11
inline void MerkleTx::set_hashblock(::std::string&& value) {
  
  hashblock_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.MerkleTx.hashBlock)
}
#endif
inline void MerkleTx::set_hashblock(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashblock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.MerkleTx.hashBlock)
}
inline void MerkleTx::set_hashblock(const char* value, size_t size) {
  
  hashblock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.MerkleTx.hashBlock)
}
inline ::std::string* MerkleTx::mutable_hashblock() {
  
  // @@protoc_insertion_point(field_mutable:Enze.MerkleTx.hashBlock)
  return hashblock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MerkleTx::release_hashblock() {
  // @@protoc_insertion_point(field_release:Enze.MerkleTx.hashBlock)
  
  return hashblock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MerkleTx::set_allocated_hashblock(::std::string* hashblock) {
  if (hashblock != NULL) {
    
  } else {
    
  }
  hashblock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashblock);
  // @@protoc_insertion_point(field_set_allocated:Enze.MerkleTx.hashBlock)
}

// repeated string vMerkleBranch = 3;
inline int MerkleTx::vmerklebranch_size() const {
  return vmerklebranch_.size();
}
inline void MerkleTx::clear_vmerklebranch() {
  vmerklebranch_.Clear();
}
inline const ::std::string& MerkleTx::vmerklebranch(int index) const {
  // @@protoc_insertion_point(field_get:Enze.MerkleTx.vMerkleBranch)
  return vmerklebranch_.Get(index);
}
inline ::std::string* MerkleTx::mutable_vmerklebranch(int index) {
  // @@protoc_insertion_point(field_mutable:Enze.MerkleTx.vMerkleBranch)
  return vmerklebranch_.Mutable(index);
}
inline void MerkleTx::set_vmerklebranch(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Enze.MerkleTx.vMerkleBranch)
  vmerklebranch_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MerkleTx::set_vmerklebranch(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Enze.MerkleTx.vMerkleBranch)
  vmerklebranch_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MerkleTx::set_vmerklebranch(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vmerklebranch_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Enze.MerkleTx.vMerkleBranch)
}
inline void MerkleTx::set_vmerklebranch(int index, const char* value, size_t size) {
  vmerklebranch_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Enze.MerkleTx.vMerkleBranch)
}
inline ::std::string* MerkleTx::add_vmerklebranch() {
  // @@protoc_insertion_point(field_add_mutable:Enze.MerkleTx.vMerkleBranch)
  return vmerklebranch_.Add();
}
inline void MerkleTx::add_vmerklebranch(const ::std::string& value) {
  vmerklebranch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Enze.MerkleTx.vMerkleBranch)
}
#if LANG_CXX11
inline void MerkleTx::add_vmerklebranch(::std::string&& value) {
  vmerklebranch_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Enze.MerkleTx.vMerkleBranch)
}
#endif
inline void MerkleTx::add_vmerklebranch(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vmerklebranch_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Enze.MerkleTx.vMerkleBranch)
}
inline void MerkleTx::add_vmerklebranch(const char* value, size_t size) {
  vmerklebranch_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Enze.MerkleTx.vMerkleBranch)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
MerkleTx::vmerklebranch() const {
  // @@protoc_insertion_point(field_list:Enze.MerkleTx.vMerkleBranch)
  return vmerklebranch_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
MerkleTx::mutable_vmerklebranch() {
  // @@protoc_insertion_point(field_mutable_list:Enze.MerkleTx.vMerkleBranch)
  return &vmerklebranch_;
}

// int32 nIndex = 4;
inline void MerkleTx::clear_nindex() {
  nindex_ = 0;
}
inline ::google::protobuf::int32 MerkleTx::nindex() const {
  // @@protoc_insertion_point(field_get:Enze.MerkleTx.nIndex)
  return nindex_;
}
inline void MerkleTx::set_nindex(::google::protobuf::int32 value) {
  
  nindex_ = value;
  // @@protoc_insertion_point(field_set:Enze.MerkleTx.nIndex)
}

// bool bMerkleVerified = 5;
inline void MerkleTx::clear_bmerkleverified() {
  bmerkleverified_ = false;
}
inline bool MerkleTx::bmerkleverified() const {
  // @@protoc_insertion_point(field_get:Enze.MerkleTx.bMerkleVerified)
  return bmerkleverified_;
}
inline void MerkleTx::set_bmerkleverified(bool value) {
  
  bmerkleverified_ = value;
  // @@protoc_insertion_point(field_set:Enze.MerkleTx.bMerkleVerified)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OrderForm

// map<string, string> mapOrder = 1;
inline int OrderForm::maporder_size() const {
  return maporder_.size();
}
inline void OrderForm::clear_maporder() {
  maporder_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
OrderForm::maporder() const {
  // @@protoc_insertion_point(field_map:Enze.OrderForm.mapOrder)
  return maporder_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
OrderForm::mutable_maporder() {
  // @@protoc_insertion_point(field_mutable_map:Enze.OrderForm.mapOrder)
  return maporder_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WalletTx

// .Enze.MerkleTx cSelfMekleInfo = 1;
inline bool WalletTx::has_cselfmekleinfo() const {
  return this != internal_default_instance() && cselfmekleinfo_ != NULL;
}
inline void WalletTx::clear_cselfmekleinfo() {
  if (GetArenaNoVirtual() == NULL && cselfmekleinfo_ != NULL) {
    delete cselfmekleinfo_;
  }
  cselfmekleinfo_ = NULL;
}
inline const ::Enze::MerkleTx& WalletTx::cselfmekleinfo() const {
  const ::Enze::MerkleTx* p = cselfmekleinfo_;
  // @@protoc_insertion_point(field_get:Enze.WalletTx.cSelfMekleInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::MerkleTx*>(
      &::Enze::_MerkleTx_default_instance_);
}
inline ::Enze::MerkleTx* WalletTx::release_cselfmekleinfo() {
  // @@protoc_insertion_point(field_release:Enze.WalletTx.cSelfMekleInfo)
  
  ::Enze::MerkleTx* temp = cselfmekleinfo_;
  cselfmekleinfo_ = NULL;
  return temp;
}
inline ::Enze::MerkleTx* WalletTx::mutable_cselfmekleinfo() {
  
  if (cselfmekleinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::MerkleTx>(GetArenaNoVirtual());
    cselfmekleinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.WalletTx.cSelfMekleInfo)
  return cselfmekleinfo_;
}
inline void WalletTx::set_allocated_cselfmekleinfo(::Enze::MerkleTx* cselfmekleinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cselfmekleinfo_;
  }
  if (cselfmekleinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cselfmekleinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cselfmekleinfo, submessage_arena);
    }
    
  } else {
    
  }
  cselfmekleinfo_ = cselfmekleinfo;
  // @@protoc_insertion_point(field_set_allocated:Enze.WalletTx.cSelfMekleInfo)
}

// repeated .Enze.MerkleTx vPrevTx = 2;
inline int WalletTx::vprevtx_size() const {
  return vprevtx_.size();
}
inline void WalletTx::clear_vprevtx() {
  vprevtx_.Clear();
}
inline ::Enze::MerkleTx* WalletTx::mutable_vprevtx(int index) {
  // @@protoc_insertion_point(field_mutable:Enze.WalletTx.vPrevTx)
  return vprevtx_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Enze::MerkleTx >*
WalletTx::mutable_vprevtx() {
  // @@protoc_insertion_point(field_mutable_list:Enze.WalletTx.vPrevTx)
  return &vprevtx_;
}
inline const ::Enze::MerkleTx& WalletTx::vprevtx(int index) const {
  // @@protoc_insertion_point(field_get:Enze.WalletTx.vPrevTx)
  return vprevtx_.Get(index);
}
inline ::Enze::MerkleTx* WalletTx::add_vprevtx() {
  // @@protoc_insertion_point(field_add:Enze.WalletTx.vPrevTx)
  return vprevtx_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Enze::MerkleTx >&
WalletTx::vprevtx() const {
  // @@protoc_insertion_point(field_list:Enze.WalletTx.vPrevTx)
  return vprevtx_;
}

// map<string, string> mapValue = 3;
inline int WalletTx::mapvalue_size() const {
  return mapvalue_.size();
}
inline void WalletTx::clear_mapvalue() {
  mapvalue_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
WalletTx::mapvalue() const {
  // @@protoc_insertion_point(field_map:Enze.WalletTx.mapValue)
  return mapvalue_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
WalletTx::mutable_mapvalue() {
  // @@protoc_insertion_point(field_mutable_map:Enze.WalletTx.mapValue)
  return mapvalue_.MutableMap();
}

// repeated .Enze.OrderForm OrderList = 4;
inline int WalletTx::orderlist_size() const {
  return orderlist_.size();
}
inline void WalletTx::clear_orderlist() {
  orderlist_.Clear();
}
inline ::Enze::OrderForm* WalletTx::mutable_orderlist(int index) {
  // @@protoc_insertion_point(field_mutable:Enze.WalletTx.OrderList)
  return orderlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Enze::OrderForm >*
WalletTx::mutable_orderlist() {
  // @@protoc_insertion_point(field_mutable_list:Enze.WalletTx.OrderList)
  return &orderlist_;
}
inline const ::Enze::OrderForm& WalletTx::orderlist(int index) const {
  // @@protoc_insertion_point(field_get:Enze.WalletTx.OrderList)
  return orderlist_.Get(index);
}
inline ::Enze::OrderForm* WalletTx::add_orderlist() {
  // @@protoc_insertion_point(field_add:Enze.WalletTx.OrderList)
  return orderlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Enze::OrderForm >&
WalletTx::orderlist() const {
  // @@protoc_insertion_point(field_list:Enze.WalletTx.OrderList)
  return orderlist_;
}

// bool bTimeReceivedIsTxTime = 5;
inline void WalletTx::clear_btimereceivedistxtime() {
  btimereceivedistxtime_ = false;
}
inline bool WalletTx::btimereceivedistxtime() const {
  // @@protoc_insertion_point(field_get:Enze.WalletTx.bTimeReceivedIsTxTime)
  return btimereceivedistxtime_;
}
inline void WalletTx::set_btimereceivedistxtime(bool value) {
  
  btimereceivedistxtime_ = value;
  // @@protoc_insertion_point(field_set:Enze.WalletTx.bTimeReceivedIsTxTime)
}

// uint32 uTimeReceived = 6;
inline void WalletTx::clear_utimereceived() {
  utimereceived_ = 0u;
}
inline ::google::protobuf::uint32 WalletTx::utimereceived() const {
  // @@protoc_insertion_point(field_get:Enze.WalletTx.uTimeReceived)
  return utimereceived_;
}
inline void WalletTx::set_utimereceived(::google::protobuf::uint32 value) {
  
  utimereceived_ = value;
  // @@protoc_insertion_point(field_set:Enze.WalletTx.uTimeReceived)
}

// bool m_bFromMe = 7;
inline void WalletTx::clear_m_bfromme() {
  m_bfromme_ = false;
}
inline bool WalletTx::m_bfromme() const {
  // @@protoc_insertion_point(field_get:Enze.WalletTx.m_bFromMe)
  return m_bfromme_;
}
inline void WalletTx::set_m_bfromme(bool value) {
  
  m_bfromme_ = value;
  // @@protoc_insertion_point(field_set:Enze.WalletTx.m_bFromMe)
}

// bool m_bSpent = 8;
inline void WalletTx::clear_m_bspent() {
  m_bspent_ = false;
}
inline bool WalletTx::m_bspent() const {
  // @@protoc_insertion_point(field_get:Enze.WalletTx.m_bSpent)
  return m_bspent_;
}
inline void WalletTx::set_m_bspent(bool value) {
  
  m_bspent_ = value;
  // @@protoc_insertion_point(field_set:Enze.WalletTx.m_bSpent)
}

// uint32 uTimeDisplayed = 9;
inline void WalletTx::clear_utimedisplayed() {
  utimedisplayed_ = 0u;
}
inline ::google::protobuf::uint32 WalletTx::utimedisplayed() const {
  // @@protoc_insertion_point(field_get:Enze.WalletTx.uTimeDisplayed)
  return utimedisplayed_;
}
inline void WalletTx::set_utimedisplayed(::google::protobuf::uint32 value) {
  
  utimedisplayed_ = value;
  // @@protoc_insertion_point(field_set:Enze.WalletTx.uTimeDisplayed)
}

// -------------------------------------------------------------------

// Order

// string hashReply = 1;
inline void Order::clear_hashreply() {
  hashreply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::hashreply() const {
  // @@protoc_insertion_point(field_get:Enze.Order.hashReply)
  return hashreply_.GetNoArena();
}
inline void Order::set_hashreply(const ::std::string& value) {
  
  hashreply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Enze.Order.hashReply)
}
#if LANG_CXX11
inline void Order::set_hashreply(::std::string&& value) {
  
  hashreply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Enze.Order.hashReply)
}
#endif
inline void Order::set_hashreply(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashreply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Enze.Order.hashReply)
}
inline void Order::set_hashreply(const char* value, size_t size) {
  
  hashreply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Enze.Order.hashReply)
}
inline ::std::string* Order::mutable_hashreply() {
  
  // @@protoc_insertion_point(field_mutable:Enze.Order.hashReply)
  return hashreply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_hashreply() {
  // @@protoc_insertion_point(field_release:Enze.Order.hashReply)
  
  return hashreply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_hashreply(::std::string* hashreply) {
  if (hashreply != NULL) {
    
  } else {
    
  }
  hashreply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashreply);
  // @@protoc_insertion_point(field_set_allocated:Enze.Order.hashReply)
}

// .Enze.WalletTx txOrder = 2;
inline bool Order::has_txorder() const {
  return this != internal_default_instance() && txorder_ != NULL;
}
inline void Order::clear_txorder() {
  if (GetArenaNoVirtual() == NULL && txorder_ != NULL) {
    delete txorder_;
  }
  txorder_ = NULL;
}
inline const ::Enze::WalletTx& Order::txorder() const {
  const ::Enze::WalletTx* p = txorder_;
  // @@protoc_insertion_point(field_get:Enze.Order.txOrder)
  return p != NULL ? *p : *reinterpret_cast<const ::Enze::WalletTx*>(
      &::Enze::_WalletTx_default_instance_);
}
inline ::Enze::WalletTx* Order::release_txorder() {
  // @@protoc_insertion_point(field_release:Enze.Order.txOrder)
  
  ::Enze::WalletTx* temp = txorder_;
  txorder_ = NULL;
  return temp;
}
inline ::Enze::WalletTx* Order::mutable_txorder() {
  
  if (txorder_ == NULL) {
    auto* p = CreateMaybeMessage<::Enze::WalletTx>(GetArenaNoVirtual());
    txorder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Enze.Order.txOrder)
  return txorder_;
}
inline void Order::set_allocated_txorder(::Enze::WalletTx* txorder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete txorder_;
  }
  if (txorder) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      txorder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, txorder, submessage_arena);
    }
    
  } else {
    
  }
  txorder_ = txorder;
  // @@protoc_insertion_point(field_set_allocated:Enze.Order.txOrder)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Enze

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Order_2eproto
